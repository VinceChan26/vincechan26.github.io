<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript ES6 (var, let 和 const)作用域與 JavaScript 中的線程</title>
      <link href="/2019/05/10/JavaScriptTask/"/>
      <url>/2019/05/10/JavaScriptTask/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="JavaScript-ES6"><a href="#JavaScript-ES6" class="headerlink" title="JavaScript ES6"></a>JavaScript ES6</h1><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><ul><li>可重複宣告</li><li>變量聲明提升特性 (<code>var hoisting</code>)</li></ul><blockquote><p>var 為 JavaScript 最弱的變數宣告</p></blockquote><p><br></p><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><ul><li>可重複宣告</li></ul><p><br></p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><ul><li>常數</li><li>不允許重複宣告</li></ul><p><br></p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="var-作用域"><a href="#var-作用域" class="headerlink" title="var 作用域"></a>var 作用域</h2><blockquote><p>為全局(<code>global</code>) 作用，無論在 function 內何處宣告通通都會因為 <code>hoisting</code> 特性進而提升。</p></blockquote><p><br></p><h2 id="let-作用域"><a href="#let-作用域" class="headerlink" title="let 作用域"></a>let 作用域</h2><blockquote><p>為 block (意指 <code>{}</code> 或是簡稱大括號) 內，除了 function 以外 if、for 的 <code>{}</code> 都屬於 let 的作用域。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function varA () &#123;</span><br><span class="line">  var aa = &apos;AAA&apos;;</span><br><span class="line">  if (true) &#123;</span><br><span class="line">    var aa = &apos;BBB&apos;;</span><br><span class="line">    // 這裡的 aa 依然是外層的 AAA，所以 AAA 即將被取代為 BBB</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(aa);  // BBB</span><br><span class="line">&#125;</span><br><span class="line">function letA () &#123;</span><br><span class="line">  let aa = &apos;CCC&apos;;</span><br><span class="line">  if (true) &#123;</span><br><span class="line">    let aa = &apos;DDD&apos;;</span><br><span class="line">    // 這裡的 aa 是不同的，只有在這個 if block 才有作用</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(aa);  // &apos;CC&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">varA();</span><br><span class="line">letA();</span><br></pre></td></tr></table></figure><p>執行以下結果，試問結果何 ?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">    console.log(x);</span><br><span class="line">    var x = 20;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></p><p>結果是 <code>undefined</code></p><p>若是將 var 改為 let，結果為何 ?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">    console.log(x);</span><br><span class="line">    let x = 20;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></p><p>結果為 ReferenceError，主要原因是在於說 <code>let 沒有 hoisting 特性</code></p><p><br></p><h1 id="JavaScript-Single-thread"><a href="#JavaScript-Single-thread" class="headerlink" title="JavaScript Single thread"></a>JavaScript Single thread</h1><blockquote><p>JavaScript 是單線程<code>single thread</code> 語言</p></blockquote><p>所謂的單線程是指一個瀏覽器行程（process）只有一個 JS 的執行線程(但不代表瀏覽器是單線程)，同一個時段內只會有一段代碼在執行，代表一次只能完成一件事，如果有多件事，就代表你要排隊，一件一件的處理，如果有一件事卡死或要做很久，就代表下面的事永遠不會執行。</p><p>優點是簡單，環境單純。<br>缺點是如果其中一個事件很耗時間，會拖慢整個程式執行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">new Promise(function(resolve)&#123;</span><br><span class="line">    console.log(2);</span><br><span class="line">    for(var i = 0; i &lt; 10000; i++)&#123;</span><br><span class="line">        i == 99 &amp;&amp; resolve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(function()&#123;</span><br><span class="line">    console.log(3)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(4);</span><br></pre></td></tr></table></figure><p><code>Result: 2 4 3 1</code></p><p>為何結果會是 <code>2 4 3 1</code> ?</p><p>主要原因是在於 setTimeout 為異步函式(<code>Asynchronous Function</code>)，所以會先執行主線程的 <code>Promise</code> 並進入異步等待 <code>then</code> 的回覆，所以會先執行外層的 console 4，再執行 then 的 callback console 3 最後則是 setTimeout 的 console 1</p><p><br></p><h1 id="setTimeout-fn-ms"><a href="#setTimeout-fn-ms" class="headerlink" title="setTimeout(fn, ms)"></a>setTimeout(fn, ms)</h1><p><code>setTimeout</code> 主要是<code>異步可以延遲執行</code>，以下是一個延遲 5 秒的範例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;延遲 5 秒&apos;);</span><br><span class="line">&#125;, 5000);</span><br></pre></td></tr></table></figure></p><p>以下是一個範例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;延遲 5 秒&apos;);</span><br><span class="line">&#125;, 5000);</span><br><span class="line"></span><br><span class="line">console.log(&apos;執行 console&apos;);</span><br></pre></td></tr></table></figure></p><p>執行結果如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">執行 console</span><br><span class="line">延遲五秒</span><br></pre></td></tr></table></figure></p><p>為何執行結果會先印出「執行 console」 ?<br>主要因為 <code>setTimeout 為異步函式</code>，所以會先執行同步任務(執行 console)。</p><p>JavaScript 線程執行方式為</p><ul><li><code>console.log(&#39;延遲 5 秒&#39;)</code> 進入 Event Table 並註冊，開始 <code>seTimeout</code> 計時。</li><li>執行 <code>console.log(&#39;執行 console&#39;)</code>，此時計時仍在繼續進行。</li><li>5 秒到了，<code>seTimeout</code> 完成，<code>console.log(&#39;延遲 5 秒&#39;)</code> 進入 Event Queue。</li><li><code>console.log(&#39;延遲 5 秒&#39;)</code> 進入主線程執行。</li></ul><blockquote><p><code>setTimeout</code> 是經過指定時間後，才將 closure 內的任務加入至 Event Queue，因為 JavaScript 為單線程任務所以要逐一執行，因為原先主線程的任務可能會過於龐大，所以真正的 <code>setTimeout</code> 延遲可能會讓時間遠遠大於原先預期時間。</p></blockquote><p><br></p><h2 id="setTimeout-fn-0"><a href="#setTimeout-fn-0" class="headerlink" title="setTimeout(fn, 0)"></a>setTimeout(fn, 0)</h2><p>setTimeout(fn, 0) 意指在最早可得的空閒時間執行，亦可了解為主線程執行全部的同步任務後就立即執行。</p><blockquote><p><code>setTimeout</code> 根據 HTML 標準，最快的時間為 4ms</p></blockquote><p><br></p><h1 id="setInterval-fn-ms"><a href="#setInterval-fn-ms" class="headerlink" title="setInterval(fn, ms)"></a>setInterval(fn, ms)</h1><p><code>setInterval</code> 主要運用於<code>循環的執行</code>，執行順序來說 <code>setInterval</code> 會每隔指定的時間將任務的函式置入 Event Queue，如果先前的主程序過於龐大仍然會需要等待時間。</p><blockquote><p><code>setInterval(fn, ms)</code> 是指每過 <code>ms</code> 秒，就將 <code>fn</code> 置入 Event Queue，一旦 <code>setInterval</code> 的回調函式 <code>fn</code> 執行時間超過延遲時間 <code>ms</code>，則完全看不出有時間間隔。</p></blockquote><p><br></p><h1 id="Promise-與-process-nextTick-callback"><a href="#Promise-與-process-nextTick-callback" class="headerlink" title="Promise 與 process.nextTick(callback)"></a>Promise 與 process.nextTick(callback)</h1><p><code>Promise</code> 就不再多做描述，建議搜尋「阮一峰 Promise」<br><code>process.nextTick(callback)</code> 類似 node.js 的 setTimeout，在事件的循環的下一次循換呼叫 callback 函式</p><p><br></p><h1 id="Macrotask-與-Mircotask"><a href="#Macrotask-與-Mircotask" class="headerlink" title="Macrotask 與 Mircotask"></a>Macrotask 與 Mircotask</h1><p>Macrotask 與 Mircotask 都屬於異步任務中的一種，Macrotask 又可稱為 Task queues，以下是兩者的 API 歸類。</p><ul><li>Macrotask<ul><li>setTimeout</li><li>setInterval</li><li>setImmediate</li><li>I/O</li><li>UI rendering </li></ul></li><li>Mircotask<ul><li>process.nextTick</li><li>Promise</li><li>Object.observe</li><li>MutationObserver</li></ul></li></ul><p>Macrotask 與 Microtask 有何處不同 ? 通過下面的程式碼來展現他們不同處。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">console.log(1);</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(2);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">new Promise((resolve) =&gt; &#123;</span><br><span class="line">    console.log(3);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(4);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.nextTick(() =&gt; &#123;</span><br><span class="line">    console.log(5);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(6);</span><br></pre></td></tr></table></figure></p><p><code>Result: 1 3 6 5 4 2</code></p><blockquote><p>在每次事件循環中，macrotask 只會提取一個執行，而 microtask 會一直不斷地提取，直到 microtask 被清空。</p></blockquote><blockquote><p>主程序 -&gt; 主程序 (done) -&gt; microtask -&gt; microtask (done) -&gt; macrotask -&gt; macrotask (done)</p></blockquote><p><br></p><h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p><a href="http://marklin-blog.logdown.com/posts/294468-javascript-single-thread" target="_blank">Javascript 單線程</a><br><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules" target="_blank">Tasks, microtasks, queues and schedules</a><br><a href="https://juejin.im/entry/58d4df3b5c497d0057eb99ff" target="_blank">理解 JavaScript 中的 macrotask 和 microtask</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> var </tag>
            
            <tag> let </tag>
            
            <tag> const </tag>
            
            <tag> 作用域 </tag>
            
            <tag> hoisting </tag>
            
            <tag> single thread </tag>
            
            <tag> setTimeout </tag>
            
            <tag> setInterval </tag>
            
            <tag> macrotask </tag>
            
            <tag> microtask </tag>
            
            <tag> process.next </tag>
            
            <tag> Promise </tag>
            
            <tag> javascript queues </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RDBMS 的 ACID</title>
      <link href="/2019/05/01/RDBMS/"/>
      <url>/2019/05/01/RDBMS/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><style>tr:nth-child(2) > td:nth-child(2),tr:nth-child(3) > td:nth-child(2),tr:nth-child(3) > td:nth-child(3),tr:nth-child(4) > td:not(:first-child) {    background: #bbffdd;}tr:nth-child(1) > td:not(:first-child),tr:nth-child(2) > td:nth-child(3),tr:nth-child(2) > td:nth-child(4),tr:nth-child(3) > td:nth-child(4) {    background: #ff9999;}</style><h1 id="RDBMS-的-ACID"><a href="#RDBMS-的-ACID" class="headerlink" title="RDBMS 的 ACID"></a>RDBMS 的 ACID</h1><p>ACID 是指資料庫管理系統 (DBMS) 在寫入或更新資料的過程中，為保證事務(Transaction, 簡稱 TX)是正確可靠的。</p><blockquote><p>ACID 必須具備 <code>Atomicity</code> <code>Consistency</code> <code>Isolation</code> <code>Durability</code></p></blockquote><p><br></p><h1 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h1><h2 id="原子性-Atomicity"><a href="#原子性-Atomicity" class="headerlink" title="原子性 Atomicity"></a>原子性 <code>Atomicity</code></h2><blockquote><p>TX 是一個不可分割的單元，只允許全部完成或全部不完成</p></blockquote><p>一個 TX，只允許全部完成或全部不完成，不會結束在中間某個環節。</p><p>過程中若發生錯誤，會回到 TX 開始前的狀態 (此行為稱為回滾 (Rollback))。</p><h2 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性 Consistency"></a>一致性 <code>Consistency</code></h2><blockquote><p>每個人對 Consistency 定義不完全相同</p></blockquote><p>TX 進行後，資料庫的完整性沒有被破壞。</p><p>寫入的資料必須完全符合所有的預設規則，這包含資料的精確度、串聯性以及後續可自發性地完成預定的工作。</p><h2 id="隔離性-Isolation"><a href="#隔離性-Isolation" class="headerlink" title="隔離性 Isolation"></a>隔離性 <code>Isolation</code></h2><blockquote><p>確保同一筆資料被改動時，確保不會被兩個 TX 同時改動</p></blockquote><p>當兩個或者多個 TX 併發訪問(此處訪問指查詢和修改的操作) 資料庫的同一數據時所表現出的相互關係。</p><p><code>Isolation</code> 是交易的保證之一，表示交易與交易之間不互相干擾，如同同時間就只有自己的交易存在一樣，隔離性保證的基本方式是在資料庫層面，對資料庫或相關欄位鎖定，在同一時間內只允許一個交易進行更新或讀取。</p><h3 id="Isolation-是為了避免-Race-condition"><a href="#Isolation-是為了避免-Race-condition" class="headerlink" title="Isolation 是為了避免 Race condition"></a>Isolation 是為了避免 Race condition</h3><p>如果有兩個 TX 正在改動相同的資料， RDBMS 會讓後來的 TX 被 blocking, 來避免 race condition</p><h4 id="何謂-Race-condition"><a href="#何謂-Race-condition" class="headerlink" title="何謂 Race condition"></a>何謂 Race condition</h4><p>兩個程序同時運行時，對同一個單元進行操作，使最終的結果不正確。</p><h2 id="持久性-Durability"><a href="#持久性-Durability" class="headerlink" title="持久性 Durability"></a>持久性 <code>Durability</code></h2><blockquote><p>commit 時如果系統發生錯誤，那麼在系統復原後要繼續原本未完成的工作</p></blockquote><p>在 TX 完成以後，對資料庫所作的更改保存在資料庫之中，並且是完全的。</p><p>底層行為是寫入 redo log</p><p><br></p><h1 id="Read-Phenomena"><a href="#Read-Phenomena" class="headerlink" title="Read Phenomena"></a>Read Phenomena</h1><h2 id="Dirty-reads-髒讀"><a href="#Dirty-reads-髒讀" class="headerlink" title="Dirty reads (髒讀)"></a>Dirty reads (髒讀)</h2><blockquote><p>能讀取 uncommited 的 TX 資料。</p></blockquote><h2 id="Non-repeatable-reads-不重複讀取"><a href="#Non-repeatable-reads-不重複讀取" class="headerlink" title="Non-repeatable reads (不重複讀取)"></a>Non-repeatable reads (不重複讀取)</h2><blockquote><p>在同一 TX 第一次讀取和第二次讀取內容結果不同。</p></blockquote><h2 id="Phantom-reads-幻讀"><a href="#Phantom-reads-幻讀" class="headerlink" title="Phantom reads (幻讀)"></a>Phantom reads (幻讀)</h2><blockquote><p>當在同一個 TX 連續兩次讀取之間，有另一個 TX 進行 <code>insert</code> <code>delete</code>，使<span style="color: red;">讀取出來的筆數跟上次不同</span>。</p></blockquote><p>References: <a href="https://en.wikipedia.org/wiki/Isolation_(database_systems)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Isolation_(database_systems)</a></p><h3 id="Non-repeatable-reads-Phantom-reads-的差異"><a href="#Non-repeatable-reads-Phantom-reads-的差異" class="headerlink" title="Non-repeatable reads, Phantom reads 的差異"></a>Non-repeatable reads, Phantom reads 的差異</h3><h4 id="Non-repeatable-reads"><a href="#Non-repeatable-reads" class="headerlink" title="Non-repeatable reads"></a>Non-repeatable reads</h4><blockquote><p>第一次查詢與第二次查詢結果上的<span style="color: red;">結果內容不同</span>。</p></blockquote><h4 id="Phantom-Reads"><a href="#Phantom-Reads" class="headerlink" title="Phantom Reads"></a>Phantom Reads</h4><blockquote><p>第一次查詢與第二次查詢出來的<span style="color: red;">筆數不同</span>。</p></blockquote><p><br></p><h1 id="隔離級別-Isolation-Level"><a href="#隔離級別-Isolation-Level" class="headerlink" title="隔離級別 Isolation Level"></a>隔離級別 <code>Isolation Level</code></h1><table><thead><tr><th>Isolation Level</th><th>Dirty reads</th><th>Non-repeatable reads</th><th>Phantom reads</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>may occur</td><td>may occur</td><td>may occur</td></tr><tr><td>Read committed</td><td>don’t occur</td><td>may occur</td><td>may occur</td></tr><tr><td>Repeatable read</td><td>don’t occur</td><td>don’t occur</td><td>may occur</td></tr><tr><td>Serializable</td><td>don’t occur</td><td>don’t occur</td><td>don’t occur</td></tr></tbody></table><ul><li><code>Read uncommitted</code></li><li><code>Read committed</code><br>能防止 Dirty reads</li><li><code>Repeatable read</code><br>能防止 Dirty reads, Non-repeatable reads</li><li><code>Serializable</code><br>能防止 Dirty reads, Non-repeatable reads, Phantom reads</li></ul><p><br></p><h1 id="查詢-MySQL-Isolation-Level"><a href="#查詢-MySQL-Isolation-Level" class="headerlink" title="查詢 MySQL Isolation Level"></a>查詢 MySQL Isolation Level</h1><p><span style="color: red;">MySQL 的 Isolation Level 預設為 <code>Repeatable Reads</code></span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># MySQL Version &gt;= 8.0</span><br><span class="line">&gt; SELECT @@transaction_isolation;</span><br><span class="line"></span><br><span class="line"># MySQL Version &lt; 8.0</span><br><span class="line">&gt; SELECT @@tx_isolation;</span><br></pre></td></tr></table></figure></p><p><br></p><h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p><a href="http://stan-blog.logdown.com/posts/7633758-isolation" target="_blank">[DB] Isolation</a><br><a href="https://www.itread01.com/article/1512011039.html" target="_blank">Mysql 8 新特性 window functions 的作用</a><br><a href="https://dotblogs.com.tw/ricochen/2011/12/16/62448" target="_blank">再談 Clustered Index</a><br><a href="https://medium.com/getamis/database-transaction-isolation-a1e448a7736e" target="_blank">資料庫交易的 Isolation</a><br><a href="https://kkc.github.io/2015/08/16/RDBMS-course/" target="_blank">RDBMS 先修課程筆記</a><br><a href="https://blog.csdn.net/holdbelief/article/details/79673752" target="_blank">flume之退避算法backoff algorithm</a><br><a href="https://segmentfault.com/a/1190000014810628" target="_blank">MySQL Redo/Binlog Group Commit , 2pc事务两阶段提交，Crash Recovery浅析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> RDBMS </tag>
            
            <tag> RDBMS ACID </tag>
            
            <tag> RDBMS Isolation </tag>
            
            <tag> Atomicity </tag>
            
            <tag> Consistency </tag>
            
            <tag> Isolation </tag>
            
            <tag> Durability </tag>
            
            <tag> Isolation Level </tag>
            
            <tag> MySQL Isolation Level </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Filter</title>
      <link href="/2019/04/01/php-filter/"/>
      <url>/2019/04/01/php-filter/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Filter-Function"><a href="#Filter-Function" class="headerlink" title="Filter Function"></a>Filter Function</h1><ul><li><code>filter_list</code><br>列出所有支援的 filter</li><li><code>filter_has_var</code><br>檢查變數是否有存在 (如同<code>isset</code>)</li><li><code>filter_id</code><br>返回 filtername ID</li><li><code>filter_input_array</code><br>輸入類型陣列濾除，如同 <code>filter_input</code></li><li><code>filter_input</code><br>輸入類型濾除</li><li><code>filter_var_array</code><br>變數陣列濾除，如同 <code>filter_var</code></li><li><code>filter_var</code><br>變數濾除</li></ul><p><br></p><h1 id="輸入類型-input-type"><a href="#輸入類型-input-type" class="headerlink" title="輸入類型 (input type)"></a>輸入類型 (input type)</h1><table><thead><tr><th>type</th><th>Parameter</th></tr></thead><tbody><tr><td>ENV</td><td>INPUT_ENV</td></tr><tr><td>REQUEST</td><td>INPUT_REQUEST</td></tr><tr><td>GET</td><td>INPUT_GET</td></tr><tr><td>POST</td><td>INPUT_POST</td></tr><tr><td>COOKIE</td><td>INPUT_COOKIE</td></tr><tr><td>SESSION</td><td>INPUT_SESSION</td></tr><tr><td>SERVER</td><td>INPUT_SERVER</td></tr></tbody></table><p><br></p><h1 id="Filter-類型-type-of-filters"><a href="#Filter-類型-type-of-filters" class="headerlink" title="Filter 類型 (type of filters)"></a>Filter 類型 (type of filters)</h1><ul><li>Validate filters</li><li>Sanitize filters</li><li>Others filters</li></ul><h2 id="Validate-filters"><a href="#Validate-filters" class="headerlink" title="Validate filters"></a>Validate filters</h2><table><thead><tr><th>Filter Type</th><th>Usage</th></tr></thead><tbody><tr><td>FILTER_VALIDATE_BOOLEAN</td><td>布林值驗證，若不為布林值回傳 NULL</td></tr><tr><td>FILTER_VALIDATE_DOMAIN</td><td>Domain 驗證 (須遵守 RFC 1034, RFC 1035, RFC 952, RFC 1123, RFC 2732, RFC 2181, RFC 1123 規範)</td></tr><tr><td>FILTER_VALIDATE_EMAIL</td><td>Email 驗證</td></tr><tr><td>FILTER_VALIDATE_FLOAT</td><td>浮點數驗證</td></tr><tr><td>FILTER_VALIDATE_INT</td><td>整數驗證</td></tr><tr><td>FILTER_VALIDATE_IP</td><td>IP 驗證</td></tr><tr><td>FILTER_VALIDATE_MAC</td><td>MAC Address 驗證</td></tr><tr><td>FILTER_VALIDATE_REGEXP</td><td>使用 RegExp 驗證</td></tr><tr><td>FILTER_VALIDATE_URL</td><td>URL 驗證</td></tr></tbody></table><h2 id="Sanitize-filters"><a href="#Sanitize-filters" class="headerlink" title="Sanitize filters"></a>Sanitize filters</h2><table><thead><tr><th>Filter Type</th><th>Usage</th></tr></thead><tbody><tr><td>FILTER_SANITIZE_EMAIL</td><td>過濾除了 <code>字母</code> <code>數字</code> <code>符號</code> <code>!#$%&amp;&#39;*+-=?^_{}~@.[].</code> 的字元</td></tr><tr><td>FILTER_SANITIZE_ENCODED</td><td>URL encode</td></tr><tr><td>FILTER_SANITIZE_MAGIC_QUOTES</td><td>如同 <code>addslashes()</code></td></tr><tr><td>FILTER_SANITIZE_NUMBER_FLOAT</td><td>過濾所有字元，除了<code>數字</code> <code>浮點數</code> <code>+ -</code> <code>.,eE</code></td></tr><tr><td>FILTER_SANITIZE_NUMBER_INT</td><td>過濾所有字元，除了<code>數字</code> <code>+ -</code></td></tr><tr><td></td></tr><tr><td>FILTER_SANITIZE_SPECIAL_CHARS</td><td>HTML 轉義字元<code>&#39;</code> <code>&quot;</code> <code>&lt;&gt;</code> <code>&amp;</code> 與 <code>ASCII 小於 32</code> 的字元</td></tr><tr><td>FILTER_SANITIZE_FULL_SPECIAL_CHARS</td><td>如同 <code>htmlspecialchars()</code></td></tr><tr><td>FILTER_SANITIZE_STRING</td><td>過濾標籤字元</td></tr><tr><td>FILTER_SANITIZE_STRIPPED</td><td>如同 string 過濾</td></tr><tr><td>FILTER_SANITIZE_URL</td><td>過濾所有字元，除了<code>字母</code> <code>數字</code>與 <span>$-_.+!*’(),{}\^~[]`&lt;&gt;#%”;/?:@&amp;=.</span></td></tr><tr><td>FILTER_UNSAFE_RAW</td><td>一個預設的過濾器</td></tr></tbody></table><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><p>使用 FILTER_VALIDATE_REGEXP 過濾 datetime<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$datetime = [</span><br><span class="line">    &apos;created_at&apos; =&gt; &apos;2018-03-33 23:00:03&apos;,</span><br><span class="line">    &apos;updated_at&apos; =&gt; &apos;2018-03-31 07:09:23&apos;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">var_dump(filter_var_array($datetime, [</span><br><span class="line">    &apos;created_at&apos; =&gt; [</span><br><span class="line">        &apos;filter&apos; =&gt; FILTER_VALIDATE_REGEXP,</span><br><span class="line">        &apos;options&apos; =&gt; [</span><br><span class="line">            &apos;regexp&apos; =&gt; &apos;/^(\d&#123;4&#125;)-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01]) (00|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/&apos;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    &apos;updated_at&apos; =&gt; [</span><br><span class="line">        &apos;filter&apos; =&gt; FILTER_VALIDATE_REGEXP,</span><br><span class="line">        &apos;options&apos; =&gt; [</span><br><span class="line">            &apos;regexp&apos; =&gt; &apos;/^\d&#123;4&#125;-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01]) (00|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/&apos;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">]));</span><br><span class="line"></span><br><span class="line"># result: [&quot;created_at&quot; =&gt; false, &quot;updated_at&quot; =&gt; &quot;2018-03-31 07:09:23&quot; ]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP filter </tag>
            
            <tag> filter </tag>
            
            <tag> filter_var </tag>
            
            <tag> filter_input </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2019/03/08/git/"/>
      <url>/2019/03/08/git/</url>
      
        <content type="html"><![CDATA[<h1 id="改寫-commit"><a href="#改寫-commit" class="headerlink" title="改寫 commit"></a>改寫 commit</h1><p>使用時機：</p><ul><li>增加最近提交時漏掉的檔案</li><li>修改最近的提交的內容或註解<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure></li></ul><h2 id="如何寫好-Commit-Message"><a href="#如何寫好-Commit-Message" class="headerlink" title="如何寫好 Commit Message"></a>如何寫好 Commit Message</h2><ul><li>用新的空行將標題和主體兩者隔開。</li><li>標題首字母大寫</li><li>不要用句號結束標題</li><li>標題中使用祈使句</li><li>主體部分去解釋「是什麼」和「為什麼」而不是怎麼做</li></ul><p><br></p><h1 id="檢視-commit-log"><a href="#檢視-commit-log" class="headerlink" title="檢視 commit log"></a>檢視 commit log</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><p><br></p><h1 id="檢視-commit-log-不包含-id-及摘要"><a href="#檢視-commit-log-不包含-id-及摘要" class="headerlink" title="檢視 commit log (不包含 id 及摘要)"></a>檢視 commit log (不包含 id 及摘要)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git shortlog</span><br></pre></td></tr></table></figure><p><br></p><h1 id="檢視變更-內容"><a href="#檢視變更-內容" class="headerlink" title="檢視變更(內容)"></a>檢視變更(內容)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><p><br></p><h1 id="刪除-Local-所有已經不在-Remote-的分支"><a href="#刪除-Local-所有已經不在-Remote-的分支" class="headerlink" title="刪除 Local 所有已經不在 Remote 的分支"></a>刪除 Local 所有已經不在 Remote 的分支</h1><p>以下提供兩種方法，二擇一即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch -p &amp;&amp; for branch in `git branch -vv | grep &apos;: gone]&apos; | awk &apos;&#123;print $1&#125;&apos;`; do git branch -D $branch; done</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote prune origin</span><br></pre></td></tr></table></figure><p><br></p><h1 id="取消過去的提交"><a href="#取消過去的提交" class="headerlink" title="取消過去的提交"></a>取消過去的提交</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert</span><br></pre></td></tr></table></figure><p><br></p><h1 id="改寫提交的歷史紀錄"><a href="#改寫提交的歷史紀錄" class="headerlink" title="改寫提交的歷史紀錄"></a>改寫提交的歷史紀錄</h1><p>在 push 之前，重新輸入正確的提交註解<br>將含義上相近的內容，合併成清楚的提交<br>增加最近提交時漏掉的檔案<br>git rebase -i (-i 參數，可以改寫提交，替換，刪除，合併)</p><p><br></p><h1 id="匯合分支上的提交一同合併"><a href="#匯合分支上的提交一同合併" class="headerlink" title="匯合分支上的提交一同合併"></a>匯合分支上的提交一同合併</h1><h2 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h2><p>先使用 git log 查看 commit ID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i commit ID</span><br></pre></td></tr></table></figure></p><p>e.g:</p><pre><code>commit  1 -&gt; 2 -&gt; 3git  rebase -i 1 後對 2, 3 commit message 做 squash在使用 git log 觀看 message 是否 squash</code></pre><p>squash</p><p><br></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/wearehive/project-guidelines/blob/master/README-zh.md" target="_blank" rel="noopener">https://github.com/wearehive/project-guidelines/blob/master/README-zh.md</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue webpack3 升級成 webpack4</title>
      <link href="/2019/01/14/wepack3-grade/"/>
      <url>/2019/01/14/wepack3-grade/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-webpack3-升級成-webpack4"><a href="#vue-webpack3-升級成-webpack4" class="headerlink" title="vue webpack3 升級成 webpack4"></a>vue webpack3 升級成 webpack4</h1><p>在 2019 年初的時候收到來自於 Github 的 Security Alert, 告知我 Webpack-dev-server@^2.9.1 有漏洞，需要從原先的 <code>webpack-dev-server: ^2.9.1</code> 升級到 <code>^3.1.11</code></p><p>所以就來採了 webpack 升級的坑了<br><a id="more"></a></p><p><br></p><h1 id="Necessary"><a href="#Necessary" class="headerlink" title="Necessary"></a>Necessary</h1><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p><code>node &gt;= 6.11.5 OR 8 以上的 LTS version</code></p><h2 id="mode-模式配置"><a href="#mode-模式配置" class="headerlink" title="mode 模式配置"></a>mode 模式配置</h2><p>mode 是 webpack4 新增的參數選項。</p><p>有兩個值可選 <code>development</code> 與 <code>production</code><br>|option|Description|<br>|——-|—–|<br>|development| 啟用 NamedChunksPlugin, NamedModulesPlugin|<br>|production| 啟用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin, TerserPlugin|<br>|none| 不使用任何默認優化|</p><p><span style="color: red"><code>NODE_ENV 並不會自動配置 mode，所以 mode 必須自建</code></span></p><h3 id="mode-development"><a href="#mode-development" class="headerlink" title="mode: development"></a>mode: development</h3><ul><li>瀏覽器工具</li><li>優化建構速度與開發體驗</li><li>內建 <code>NamedModulesPlugin</code>, <code>NoEmitOnErrorsPlugin</code></li><li>開發模式下支援註解與提示</li></ul><h3 id="mode-production"><a href="#mode-production" class="headerlink" title="mode: production"></a>mode: production</h3><ul><li>預啟用所有優化功能 (<code>minify</code>, <code>splite</code> etc.)</li><li>內建 <code>Scope hoisting</code>, <code>Tree-shaking</code> (原<code>ModuleConcatenationPlugin</code>), <code>NoEmitOnErrorsPlugin</code>, <code>optimization.minimize</code></li><li>不支持 watching</li><li><code>process.env.NODE_ENV</code> 的值不需要再定義，不再使用 <code>DefinePlugin</code></li><li>去除開發模式下的 <code>code</code>, 註解</li><li>更小的 <code>bundle</code> 大小</li></ul><h3 id="mode-none"><a href="#mode-none" class="headerlink" title="mode: none"></a>mode: none</h3><p>會禁用所有的預載入，可以使用 <code>optiomization.*</code> 搭配出自己的自定義模式</p><h2 id="安裝-webpack-cli"><a href="#安裝-webpack-cli" class="headerlink" title="安裝 webpack-cli"></a>安裝 webpack-cli</h2><p>在 webpack4 中 cli 工具拆分成了 webpack 庫與 webpack-cli 命令行工具兩個庫，<span style="color: red">需要使用 cli，就必須安装 webpack-cli</span>，安裝語法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D webpack-cli</span><br></pre></td></tr></table></figure></p><h2 id="webpack-configure-插件優化"><a href="#webpack-configure-插件優化" class="headerlink" title="webpack configure 插件優化"></a>webpack configure 插件優化</h2><ul><li>新增 <code>optimization.splitChunks</code> 和 <code>optimization.runtimeChunk</code> 替代 <code>CommonsChunkPlugin</code></li><li>新增 <code>optimization.noEmitOnErrors</code> 替代 <code>NoEmitOnErrorsPlugin</code></li><li>新增 <code>optimization.namedModules</code> 来替代 <code>NamedModulesPlugin</code></li><li>預載入 <code>optimization.minimize</code> 來壓縮</li></ul><h2 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h2><p>升級 webpack packages，語法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D webpack webpack-bundle-analyzer webpack-dev-server webpack-merge extract-text-webpack-plugin@4.0.0-beta.0 uglifyjs-webpack-plugin optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure></p><p>升級 karam packages，語法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D karma karma-coverage karma-mocha karma-phantomjs-launcher karma-phantomjs-shim karma-sinon-chaikarma-sourcemap-loader karma-spec-reporter karma-webpack@lastest</span><br></pre></td></tr></table></figure></p><p><br></p><h1 id="Issues-Summary"><a href="#Issues-Summary" class="headerlink" title="Issues Summary"></a>Issues Summary</h1><h3 id="TypeError-Cannot-read-property-‘eslint’-of-undefined"><a href="#TypeError-Cannot-read-property-‘eslint’-of-undefined" class="headerlink" title="TypeError: Cannot read property ‘eslint’ of undefined"></a>TypeError: Cannot read property ‘eslint’ of undefined</h3><p>錯誤訊息全文：</p><blockquote><p><span style="color: red"><code>Module build failed (from ./node_modules/eslint-loader/index.js):TypeError: Cannot read property &#39;eslint&#39; of undefined</code></span></p></blockquote><h4 id="Repair"><a href="#Repair" class="headerlink" title="Repair"></a>Repair</h4><p>遇上了 <code>eslint-loader</code> 權限上的問題，解決方法配置 <code>LoaderOptions</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">   new webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">       options: &#123;&#125;</span><br><span class="line">   &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="eslint-loader-錯誤"><a href="#eslint-loader-錯誤" class="headerlink" title="eslint-loader 錯誤"></a>eslint-loader 錯誤</h3><p>錯誤訊息全文：</p><blockquote><p><span style="color: red"><code>TypeError: Cannot read property &#39;eslint&#39; of undefined at Object.module.exports (...)</code></span></p></blockquote><h4 id="Repair-1"><a href="#Repair-1" class="headerlink" title="Repair"></a>Repair</h4><p>查了一下 eslint-loader 與 webpack 4 的問題後，發現 eslint-loader@2 的時候有進行修正。</p><p>所以就來升級 eslint-loader, 語法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D eslint-loader</span><br></pre></td></tr></table></figure></p><h3 id="wepack3-升級到-webpack4"><a href="#wepack3-升級到-webpack4" class="headerlink" title="wepack3 升級到 webpack4"></a>wepack3 升級到 webpack4</h3><p><span style="color: red"><code>webpack 4 後，一定要設定 mode</code></span></p><h3 id="插件修正"><a href="#插件修正" class="headerlink" title="插件修正"></a>插件修正</h3><h4 id="Repair-2"><a href="#Repair-2" class="headerlink" title="Repair"></a>Repair</h4><p>webpack4 中有提到使用 <code>optimization.splitChunks</code>, <code>optimization.runtimeChunk</code> 替代 <code>CommonsChunkPlugin</code> 所以將有使用到 <code>CommonsChunkPlugin</code> 修正為 <span style="color: red"><code>RuntimeChunkPlugin</code></span></p><p>內建 <code>optimization.noEmitOnErrors</code> 替代 <code>NoEmitOnErrorsPlugin</code>,<br>內建 <code>optimization.namedModules</code> 替代 <code>NamedModulesPlugin</code></p><h3 id="CommonsChunkPlugin-已被刪除，建議使用-splitChunks"><a href="#CommonsChunkPlugin-已被刪除，建議使用-splitChunks" class="headerlink" title="CommonsChunkPlugin 已被刪除，建議使用 splitChunks"></a>CommonsChunkPlugin 已被刪除，建議使用 splitChunks</h3><p>錯誤訊息全文：</p><blockquote><p><span style="color: red">Error: webpack.optimize.CommonsChunkPlugin has been removed, please use config.optimization.splitChunks instead.</span></p></blockquote><h4 id="Repair-3"><a href="#Repair-3" class="headerlink" title="Repair"></a>Repair</h4><p>原：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: &apos;vendor&apos;,</span><br><span class="line">  minChunks (module) &#123;</span><br><span class="line">    return (</span><br><span class="line">      module.resource &amp;&amp;</span><br><span class="line">      /\.js$/.test(module.resource) &amp;&amp;</span><br><span class="line">      module.resource.indexOf(</span><br><span class="line">        path.join(__dirname, &apos;../node_modules&apos;)</span><br><span class="line">      ) === 0</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: &apos;manifest&apos;,</span><br><span class="line">  minChunks: Infinity</span><br><span class="line">&#125;),</span><br><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line">  async: &apos;vendor-async&apos;,</span><br><span class="line">  children: true,</span><br><span class="line">  minChunks: 3</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>修改後：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">new webpack.optimize.RuntimeChunkPlugin(&#123;</span><br><span class="line">  name: &apos;vendor&apos;,</span><br><span class="line">  minChunks (module) &#123;</span><br><span class="line">    return (</span><br><span class="line">      module.resource &amp;&amp;</span><br><span class="line">      /\.js$/.test(module.resource) &amp;&amp;</span><br><span class="line">      module.resource.indexOf(</span><br><span class="line">        path.join(__dirname, &apos;../node_modules&apos;)</span><br><span class="line">      ) === 0</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br><span class="line">new webpack.optimize.RuntimeChunkPlugin(&#123;</span><br><span class="line">  name: &apos;manifest&apos;,</span><br><span class="line">  minChunks: Infinity</span><br><span class="line">&#125;),</span><br><span class="line">new webpack.optimize.RuntimeChunkPlugin(&#123;</span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line">  async: &apos;vendor-async&apos;,</span><br><span class="line">  children: true,</span><br><span class="line">  minChunks: 3</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="extract-text-webpack-plugin-contenthash-編譯失敗問題"><a href="#extract-text-webpack-plugin-contenthash-編譯失敗問題" class="headerlink" title="extract-text-webpack-plugin [contenthash] 編譯失敗問題"></a>extract-text-webpack-plugin [contenthash] 編譯失敗問題</h3><p><span style="color: red"><code>Error: Path variable [contenthash] not implemented in this context: static/css/[name].[contenthash].css</code></span></p><h4 id="Repair-1"><a href="#Repair-1" class="headerlink" title="Repair 1:"></a>Repair 1:</h4><p>將 ExtractTextPlugin 中的 contenthash 修改成 hash</p><p>原：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new ExtractTextPlugin(&#123;</span><br><span class="line">    filename: utils.assetsPath(&apos;css/[name].[hash].css&apos;),</span><br><span class="line">    allChunks: true,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><p>修改後：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new ExtractTextPlugin(&#123;</span><br><span class="line">    filename: utils.assetsPath(&apos;css/[name].[chunkhash].css&apos;),</span><br><span class="line">    allChunks: true,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><h4 id="Repair-2"><a href="#Repair-2" class="headerlink" title="Repair 2:"></a>Repair 2:</h4><p>將 extract-text-webpack-plugin 改用 mini-css-extract-plugin</p><h3 id="vue-loader-編譯失敗"><a href="#vue-loader-編譯失敗" class="headerlink" title="vue-loader 編譯失敗"></a>vue-loader 編譯失敗</h3><p><span style="color: red">TypeError: Cannot read property ‘vue’ of undefined</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D vue-loader</span><br></pre></td></tr></table></figure></p><p>若安裝的是 <code>vue-loader@15</code> 必須在 <code>webpack.prod.conf.js</code> 檔案內載入 <code>vue-loader</code>, 語法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const VueLoaderPlugin = require(&apos;vue-loader/lib/plugin&apos;)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    new VueLoaderPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="檔案大小警告"><a href="#檔案大小警告" class="headerlink" title="檔案大小警告"></a>檔案大小警告</h3><p><span style="color: red">WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).</span></p><p>添加在 <code>webpack.conf</code> 中處理語法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">performance: &#123;</span><br><span class="line">    hints: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://webpack.js.org/concepts/mode" target="_blank" rel="noopener">https://webpack.js.org/concepts/mode</a><br><a href="https://github.com/webpack/webpack/issues/6556" target="_blank" rel="noopener">https://github.com/webpack/webpack/issues/6556</a><br><a href="https://github.com/dwqs/blog/issues/60" target="_blank" rel="noopener">https://github.com/dwqs/blog/issues/60</a><br><a href="https://www.smwenku.com/a/5b8cf99b2b71771883380a19/" target="_blank" rel="noopener">https://www.smwenku.com/a/5b8cf99b2b71771883380a19/</a><br><a href="https://segmentfault.com/a/1190000015639537" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015639537</a><br><a href="https://www.jianshu.com/p/0bd6d0df79fb" target="_blank" rel="noopener">https://www.jianshu.com/p/0bd6d0df79fb</a><br><a href="https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a" target="_blank" rel="noopener">https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a</a><br><a href="https://juejin.im/post/5bd2c74fe51d457a845f8c4d" target="_blank" rel="noopener">https://juejin.im/post/5bd2c74fe51d457a845f8c4d</a><br><a href="http://coderlt.coding.me/2018/04/12/webpack4/" target="_blank" rel="noopener">http://coderlt.coding.me/2018/04/12/webpack4/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack3 </tag>
            
            <tag> webpack4 </tag>
            
            <tag> webpack-dev-server </tag>
            
            <tag> vue-loader </tag>
            
            <tag> eslint-loader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel</title>
      <link href="/2018/06/06/laravel/"/>
      <url>/2018/06/06/laravel/</url>
      
        <content type="html"><![CDATA[<p>學習了 Laravel 一年多了，來整理一下學習到的一些小技巧。<br><a id="more"></a></p><h2 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h2><blockquote><p>Laravel 對密碼加密後，密碼長度固定為 60</p></blockquote><h3 id="加密密碼"><a href="#加密密碼" class="headerlink" title="加密密碼"></a>加密密碼</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># import facades\hash</span><br><span class="line">use Illuminate\Support\Facades\Hash;</span><br><span class="line"></span><br><span class="line"># encryption</span><br><span class="line">Hash::make($password);</span><br></pre></td></tr></table></figure><h3 id="驗證密碼"><a href="#驗證密碼" class="headerlink" title="驗證密碼"></a>驗證密碼</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># import facades\hash</span><br><span class="line">use Illuminate\Support\Facades\Hash;</span><br><span class="line"></span><br><span class="line"># Verify hash password</span><br><span class="line">Hash::check($password, $hashPassword);</span><br></pre></td></tr></table></figure><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><h3 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h3><p>GET: 查詢資料<br>POST: 新增資料<br>PUT: 修改資料<br>DELETE: 刪除資料<br>PATCH: 對資料做部分更新</p><h3 id="列出現在所有的路由端口資訊"><a href="#列出現在所有的路由端口資訊" class="headerlink" title="列出現在所有的路由端口資訊"></a>列出現在所有的路由端口資訊</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan route:list</span><br></pre></td></tr></table></figure><h2 id="Blade-templates"><a href="#Blade-templates" class="headerlink" title="Blade templates"></a>Blade templates</h2><h3 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a>Mustache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 當模板接收到控制器的資料後，可以使用 &#123;&#123;&#125;&#125; 將資料印出。</span><br><span class="line"></span><br><span class="line">// 如同 &lt;?php echo htmlentities($title)?&gt;</span><br><span class="line">&#123;&#123; $title &#125;&#125;</span><br></pre></td></tr></table></figure><p>主要作用：將變數資料的特殊字元做編碼轉換，避免 <code>XSS 攻擊</code></p><blockquote><p>XSS: 全名為 Cross-site scripting, 中譯為「跨網站指令碼」，將程式碼注入到網頁上。<br>避免方式：<a href="http://php.net/manual/en/function.htmlentities.php" target="_blank" rel="noopener">htmlentities</a>, <a href="http://php.net/manual/en/function.htmlspecialchars.php" target="_blank" rel="noopener">htmlspecialchars</a></p></blockquote><p>若是不想將變數進行 <code>htmlentities</code> 轉換直接輸出的話可使用以下方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 如同 &lt;?php echo $title ?&gt;</span><br><span class="line">&#123;!! $title !!&#125;</span><br></pre></td></tr></table></figure></p><h3 id="變動資料處理"><a href="#變動資料處理" class="headerlink" title="變動資料處理"></a>變動資料處理</h3><p>將會變動的資料使用 <code>@yield()</code> 去取代</p><h3 id="共用元件處理"><a href="#共用元件處理" class="headerlink" title="共用元件處理"></a>共用元件處理</h3><p>在畫面上的共用元件，使用 <code>@include()</code> 進行載入</p><h2 id="Migration"><a href="#Migration" class="headerlink" title="Migration"></a>Migration</h2><h3 id="使用-artisan-建立-Migration-檔案"><a href="#使用-artisan-建立-Migration-檔案" class="headerlink" title="使用 artisan 建立 Migration 檔案"></a>使用 artisan 建立 Migration 檔案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// [fileName] 位置為 檔案名稱</span><br><span class="line">$ php artisan make:migration [fileName]</span><br></pre></td></tr></table></figure><h3 id="執行-Migration-檔案"><a href="#執行-Migration-檔案" class="headerlink" title="執行 Migration 檔案"></a>執行 Migration 檔案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan migrate</span><br></pre></td></tr></table></figure><h3 id="恢復上一版本的-migration-檔案"><a href="#恢復上一版本的-migration-檔案" class="headerlink" title="恢復上一版本的 migration 檔案"></a>恢復上一版本的 migration 檔案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan migrate:rollback</span><br></pre></td></tr></table></figure><h3 id="清除所有的-migration-版本"><a href="#清除所有的-migration-版本" class="headerlink" title="清除所有的 migration 版本"></a>清除所有的 migration 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan migrate:reset</span><br></pre></td></tr></table></figure><h3 id="重設所有的-migration-版本，重新建立-migration"><a href="#重設所有的-migration-版本，重新建立-migration" class="headerlink" title="重設所有的 migration 版本，重新建立 migration"></a>重設所有的 migration 版本，重新建立 migration</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan migrate:refresh</span><br></pre></td></tr></table></figure><h3 id="如何在-Production-進行欄位變更"><a href="#如何在-Production-進行欄位變更" class="headerlink" title="如何在 Production 進行欄位變更"></a>如何在 Production 進行欄位變更</h3><p>當產品上線時，若要新增欄位的話，必須針對個別檔案進行 migration 建置。</p><p><code>--table</code> 和 <code>--create</code> 選項也可以用於某個表，以及是否遷移將創建一個新的資料表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// create_users_table, users 皆為示意</span><br><span class="line">$ php artisan make:migration create_users_table --create=users</span><br><span class="line"></span><br><span class="line">// add_votes_to_users_table, users 皆為示意</span><br><span class="line">$ php artisan make:migration add_votes_to_users_table --table=users</span><br></pre></td></tr></table></figure></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>英譯 Cross-Site Request Forgery, 中譯「跨網站請求偽造」。</p><p>是請求偽造的惡意攻擊，在表單送出時，必須確認是使用者從網站發出的請求，CSRF 產生的方式有兩種，方式如下：</p><h3 id="手動產生-CSRF-token"><a href="#手動產生-CSRF-token" class="headerlink" title="手動產生 CSRF token"></a>手動產生 CSRF token</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="Laravel-產生-CSRF-token"><a href="#Laravel-產生-CSRF-token" class="headerlink" title="Laravel 產生 CSRF token"></a>Laravel 產生 CSRF token</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;!! csrf_field() !!&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Lang"><a href="#Lang" class="headerlink" title="Lang"></a>Lang</h2><h3 id="語系檔路徑"><a href="#語系檔路徑" class="headerlink" title="語系檔路徑"></a>語系檔路徑</h3><p>路徑位址為 <code>/resources/lang/</code> 目錄中</p><h2 id="Old-Input"><a href="#Old-Input" class="headerlink" title="Old Input"></a>Old Input</h2><h3 id="驗證錯誤表單資料保留"><a href="#驗證錯誤表單資料保留" class="headerlink" title="驗證錯誤表單資料保留"></a>驗證錯誤表單資料保留</h3><p>當使用者 key in 錯誤資料時，我們往往會將使用者導向至先前的頁面。但是回先前頁面，資料卻必須要全部重新 key in，為了解決這種問題，我們在重新導向時，使用 <code>withInput()</code> 帶入使用者先前 key in 的資料。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ($validator-&gt;fails()) &#123;</span><br><span class="line">    return redirect(&apos;/user/edit&apos;)</span><br><span class="line">        -&gt;withInput();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在模板中透過 <code>old()</code> 方法接收原先表單 key in 的資料<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Email：&lt;input type=&quot;text&quot; name=&quot;email value=&quot;&#123;&#123; old(&apos;email&apos;) &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Eloquent"><a href="#Eloquent" class="headerlink" title="Eloquent"></a>Eloquent</h2><h3 id="印出-SQL-語法"><a href="#印出-SQL-語法" class="headerlink" title="印出 SQL 語法"></a>印出 SQL 語法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// import DB module</span><br><span class="line">use DB;</span><br><span class="line"></span><br><span class="line">// 啟用紀錄 SQL 語法</span><br><span class="line">DB::enableQueryLog();</span><br><span class="line"></span><br><span class="line">// query action ....</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 印出目前所有執行的 SQL 語法</span><br><span class="line">dd(DB::getQueryLog());</span><br></pre></td></tr></table></figure><h2 id="HTTP-Redirects"><a href="#HTTP-Redirects" class="headerlink" title="HTTP Redirects"></a>HTTP Redirects</h2><h3 id="導向回先前頁面"><a href="#導向回先前頁面" class="headerlink" title="導向回先前頁面"></a>導向回先前頁面</h3><p>在進行 transcation 時，通常會將使用者導向回 login 頁面，確保使用者資訊沒遺失，實作方式如下：<br><code>redirect()-&gt;intended()</code> 可以讓使用者導向回先前登入前的頁面</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="遇到-Load-balance"><a href="#遇到-Load-balance" class="headerlink" title="遇到 Load balance"></a>遇到 Load balance</h3><blockquote><p>當遇到有 load balance 時，會將 session 放在共用的 server 上，像是 database, redis, memcached</p></blockquote><h3 id="移除-session"><a href="#移除-session" class="headerlink" title="移除 session"></a>移除 session</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session()-&gt;forget()</span><br></pre></td></tr></table></figure><h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h2><h3 id="建立-Middleware"><a href="#建立-Middleware" class="headerlink" title="建立 Middleware"></a>建立 Middleware</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:middleware [fileName]</span><br></pre></td></tr></table></figure><h3 id="註冊-Middleware"><a href="#註冊-Middleware" class="headerlink" title="註冊 Middleware"></a>註冊 Middleware</h3><p>當完成 Middleware 檔案後，要在 <code>app/Http/Kernel.php</code> 做載入</p><h2 id="Database-Transactions"><a href="#Database-Transactions" class="headerlink" title="Database Transactions"></a>Database Transactions</h2><h3 id="交易-transcation"><a href="#交易-transcation" class="headerlink" title="交易(transcation)"></a>交易(transcation)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// import DB module</span><br><span class="line">use DB;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    DB::transaction(function () use () &#123;</span><br><span class="line">        // ... do something</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; catch (Exception $e) &#123;</span><br><span class="line">    // throw Exception</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h2><h3 id="寄送通知信"><a href="#寄送通知信" class="headerlink" title="寄送通知信"></a>寄送通知信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安裝 Guzzle HTTP 函式庫</span><br><span class="line">$ composer require guzzlehttp/guzzle</span><br></pre></td></tr></table></figure><h3 id="第三方認證-實作-facebook-google-github-登入"><a href="#第三方認證-實作-facebook-google-github-登入" class="headerlink" title="第三方認證 (實作 facebook, google, github 登入)"></a>第三方認證 (實作 facebook, google, github 登入)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer require laravel/socialite</span><br></pre></td></tr></table></figure><p>安裝完成後，依照官方的安裝指示，在 <code>config/app.php</code> 檔案中的 providers 與 aliases 加入套件設定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// config/app.php</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line">    // 載入 Service Providers</span><br><span class="line">    &apos;providers&apos; =&gt; [</span><br><span class="line">        Laravel\Socialite\SocialiteServiceProvider::class,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    // 類別命名</span><br><span class="line">    &apos;aliases&apos; =&gt; [</span><br><span class="line">        &apos;Socialite&apos; =&gt; Laravel\Socialite\Facades\Socialite::class</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h4 id="設定-facebook-資料"><a href="#設定-facebook-資料" class="headerlink" title="設定 facebook 資料"></a>設定 facebook 資料</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// config/services.php</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line">    &apos;facebook&apos; =&gt; [</span><br><span class="line">        &apos;client_id&apos;       =&gt; env(&apos;FB_CLIENT_ID&apos;),</span><br><span class="line">        &apos;client_secret&apos;   =&gt; env(&apos;FB_CLIENT_SECRET&apos;),</span><br><span class="line">        &apos;redirect&apos;        =&gt; env(&apos;FB_REDIRECT&apos;),</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>撰寫完檔案後，必須到 <a href="https://developers.facebook.com/apps/" target="_blank" rel="noopener"> Facebook Developers</a> 取得參數，並寫入到 <code>.env</code> 檔案內。</p><blockquote><p>在使用 Facebook 第三方認證時，必須要設定重新導向允許取得授權資料的網址，並將網址加入設定「有效的 OAuth 重新導向 URI」中。</p></blockquote><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>為了達到工作延遲處理的目的，會使用 Queue 來處理工作延遲，有點類似 Deamon。</p><h3 id="建立-Job"><a href="#建立-Job" class="headerlink" title="建立 Job"></a>建立 Job</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:job [fileName]</span><br></pre></td></tr></table></figure><p>輸入完 cli 後，可以在 app/Jobs 目錄內看到檔案。<br>最常見的例子就是註冊完後的郵件寄送。</p><h3 id="使用-Redis-存取-Job"><a href="#使用-Redis-存取-Job" class="headerlink" title="使用 Redis 存取 Job"></a>使用 Redis 存取 Job</h3><p>在派發 Job 時，若是 Job 數增加時，我們可以先將它寫入 database, redis, beanstalkd, Amazon SQS，以下我們進行 Redis 的安裝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer require &quot;predis/predis&quot;</span><br></pre></td></tr></table></figure></p><p>安裝完 Redis 後，在 <code>config/queue.php</code> 內寫入 Redis 設定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// config/queue.php</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line">    &apos;default&apos; =&gt; env(&apos;QUEUE_DRIVER&apos;, &apos;sync&apos;);</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h3 id="檢查-Job-程序"><a href="#檢查-Job-程序" class="headerlink" title="檢查 Job 程序"></a>檢查 Job 程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan queue:listen</span><br></pre></td></tr></table></figure><h3 id="持續執行-Job-工具-Supervisor"><a href="#持續執行-Job-工具-Supervisor" class="headerlink" title="持續執行 Job - 工具 Supervisor"></a>持續執行 Job - 工具 Supervisor</h3><p>最好的程序處理方式是將程序丟到作業系統的背景執行，在機器重開後，還能自動繼續執行程序，可以使用 <code>Supervisor</code> 完成這樣的工作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安裝 supervisor</span><br><span class="line">$ sudo apt-get install supervisor</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> Routing </tag>
            
            <tag> Hashing </tag>
            
            <tag> Session </tag>
            
            <tag> Eloquent </tag>
            
            <tag> CSRF </tag>
            
            <tag> Blade </tag>
            
            <tag> Migration </tag>
            
            <tag> Lang </tag>
            
            <tag> Old Input </tag>
            
            <tag> Middleware </tag>
            
            <tag> Database </tag>
            
            <tag> Package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="/2018/05/29/webpack/"/>
      <url>/2018/05/29/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>webpack 是一個模組包裝工具。<br><code>主要作用：將相互依賴的模組處理成靜態資源</code><br><a id="more"></a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="程式分割"><a href="#程式分割" class="headerlink" title="程式分割"></a>程式分割</h3><blockquote><p>Ｗebpack 的依賴樹有兩種類型的依賴：同步依賴與非同步依賴。在優化了依賴樹後，非同步依賴會成為一個程式的分割點，並組成一個新的程式區塊</p></blockquote><h3 id="載入器-Loader"><a href="#載入器-Loader" class="headerlink" title="載入器 Loader"></a>載入器 <code>Loader</code></h3><p>原生的 Webpack 只能處理 JavaScript, 但透過 Loader 可以將各種類型的資源轉換成 JavaScript 模組。</p><p>以下是常用的 Loader：</p><blockquote><p>vue-loader：用於載入與編譯 <em>.vue<br><br>vue-style-loader：用於載入 </em>.vue 的樣式<br><br>css-loader：用於樣式直接插入到頁面中 <code>&lt;style&gt;</code><br><br>less-loader：用於編譯與載入 <em>.less<br><br>babel-loader：用於將 ES6 編譯成瀏覽器相容的 ES5<br><br>file-loader：用於載入黨案<br><br>url-loader：用於載入 URL 指定的檔案<br><br>json-loader：用於載入 </em>.json<br><br>sass-loader：用於載入 <em>.sass<br><br>node-sass：用於編譯 </em>.sass</p></blockquote><h3 id="智慧解析"><a href="#智慧解析" class="headerlink" title="智慧解析"></a>智慧解析</h3><blockquote><p>Webpack 有個智慧解析器，可以處理任何第三方庫 (<code>library</code>)，無論是 CommonJS, AMD 或是普通的 JavaScript file</p></blockquote><h3 id="外掛程式系統"><a href="#外掛程式系統" class="headerlink" title="外掛程式系統"></a>外掛程式系統</h3><blockquote><p>Webpack 大多數的內部功能都是以外掛程式系統為基礎運行，還可以使用開源的 Webpack 插件達到各式的需求</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue &amp; vue-router &amp; vuex</title>
      <link href="/2018/05/22/Vue-js/"/>
      <url>/2018/05/22/Vue-js/</url>
      
        <content type="html"><![CDATA[<h1 id="全局安裝-vue-cli"><a href="#全局安裝-vue-cli" class="headerlink" title="全局安裝 vue-cli"></a>全局安裝 vue-cli</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --g vue-cli</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h1 id="使用-vue-cli-創建專案"><a href="#使用-vue-cli-創建專案" class="headerlink" title="使用 vue cli 創建專案"></a>使用 vue cli 創建專案</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue init webpack &#123;my-project&#125;</span><br></pre></td></tr></table></figure><h2 id="快速開發適用"><a href="#快速開發適用" class="headerlink" title="快速開發適用"></a>快速開發適用<br></h2><blockquote><p>simple: 用於單頁應用程式的最小化設定<br>webpack-simple: 基礎的 webpack + vue-loader<br>browserify-simple: 擁有基礎功能的的 Browserify + vueify</p></blockquote><h2 id="產品開發適用"><a href="#產品開發適用" class="headerlink" title="產品開發適用"></a>產品開發適用</h2><blockquote><p>webpack 擁有進階功能的 webpack + vue-loader 用於正式開發<br>browserify: 擁有進階功能的 Browserify + vueify 用於正式開發</p></blockquote><p><br></p><h1 id="what-is-vue-router"><a href="#what-is-vue-router" class="headerlink" title="what is vue-router"></a>what is vue-router</h1><p>它是 Vue.js 的官方路由管理器，它與 Vue.js 的核心深度集成，讓建構 SPA 應用變得簡單。</p><h2 id="關於前端路由"><a href="#關於前端路由" class="headerlink" title="關於前端路由"></a>關於前端路由</h2><p><code>前端路由是不存在「請求」一說。</code><br>前端路由是直接找到位址符合的元件或是物件並將其繪製出來，並實踐了 SPA (<code>Single Page Application</code>)</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="use-npm-install"><a href="#use-npm-install" class="headerlink" title="use npm install"></a>use npm install</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mpm install vue-router</span><br></pre></td></tr></table></figure><h3 id="use-yarn-install"><a href="#use-yarn-install" class="headerlink" title="use yarn install"></a>use yarn install</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add vue-router</span><br></pre></td></tr></table></figure><p>安裝完畢後須將 vue-router 設定於 Vue 的全域設定中。<br>在 Vue 專案中 main.js 為程式入口檔案，所以在 main.js 寫入以下內容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import VueRotuer from &apos;vue-router&apos;;</span><br><span class="line">Vue.use(VueRotuer);</span><br></pre></td></tr></table></figure></p><h2 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h2><blockquote><p>Hash：使用 URL hash 來作為路由，支援所有 browser<br>History：依賴 HTML5 History API 和伺服器設定<br>Abstract：支援所有 JavaScript 執行環境</p></blockquote><h2 id="Directive"><a href="#Directive" class="headerlink" title="Directive"></a>Directive</h2><blockquote><p><code>&lt;router-view&gt;</code>：用來內嵌自己的 component view<br><code>&lt;router-link&gt;</code>：具有路由功能應用中的點擊導覽</p></blockquote><p>在做後端開發或前端開發，路由的使用都有一個明確的原則，就是<code>不直接參考路由定義</code>。</p><p>一旦專案越來越大，路由的規則越來越多時，牽一髮而動全身，後續帶來的技術債是可想而知的。</p><p>vue-router 提供了<code>「命名路由 (name)」</code>取代舊式的 URL 路徑。</p><p>e.g.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123; name: &apos;Home&apos;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="如何追蹤動態路徑參數"><a href="#如何追蹤動態路徑參數" class="headerlink" title="如何追蹤動態路徑參數"></a>如何追蹤動態路徑參數</h2><p>透過 <code>this.$route</code> 可以將動態路徑的參數讀取出來。</p><p><br></p><h1 id="what-is-vuex"><a href="#what-is-vuex" class="headerlink" title="what is vuex"></a>what is vuex</h1><p>Vuex 是一個專為 Vue.js 應用程式開發的<code>狀態管理模式</code>。</p><p>vuex 狀態管理應用分為以下幾個部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">state: 資料來源，也就是各種共用變數</span><br><span class="line">view: 已宣告方式將 state 對映到視圖，有點像是 &lt;template&gt; 模組上參考 state 並自動處理重繪</span><br><span class="line">actions: 回應 view 上使用者輸入導致的狀態變化</span><br></pre></td></tr></table></figure></p><h2 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h2><h3 id="use-npm-install-1"><a href="#use-npm-install-1" class="headerlink" title="use npm install"></a>use npm install</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install vuex</span><br></pre></td></tr></table></figure><h3 id="use-yarn-install-1"><a href="#use-yarn-install-1" class="headerlink" title="use yarn install"></a>use yarn install</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add vuex</span><br></pre></td></tr></table></figure><h2 id="開始使用-vuex"><a href="#開始使用-vuex" class="headerlink" title="開始使用 vuex"></a>開始使用 vuex</h2><p>安裝 vuex 之後，先建立一個 store 並儲存 /src/store/index.js 內，內容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/* eslint global-require: 0 */</span><br><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import Vuex from &apos;vuex&apos;;</span><br><span class="line"></span><br><span class="line">// e.g.</span><br><span class="line">import auth from &apos;./modules/auth&apos;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  // 嚴格模式 (在開發環境下不建議使用嚴格模式，因會導致效能損失)</span><br><span class="line">  strict: process.env.NODE_ENV !== &apos;production&apos;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    // modules 載入 ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">if (module.hot) &#123;</span><br><span class="line">  // 使 auth 成為可熱重載模塊</span><br><span class="line">  module.hot.accept([</span><br><span class="line">    // e.g.</span><br><span class="line">    &apos;./modules/auth&apos;,</span><br><span class="line">  ], () =&gt; &#123;</span><br><span class="line">    // 加載新模塊</span><br><span class="line">    store.hotUpdate(&#123;</span><br><span class="line">      modules: &#123;</span><br><span class="line">        // e.g.</span><br><span class="line">        auth: require(&apos;./modules/auth&apos;).default,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><blockquote><p>State: 實例的根狀態物件，用於定義共用狀態變數<br>Getter: 讀取器，外部程式透過它取得變數的實際值 (像是 vue computed)<br>Action: 動作，執行本機或是遠端某一個操作，<code>像是 vue methods</code>，更像是 MVC 中的 Controller, 可以執行任何的<code>非同步處理</code>，<code>他對狀態只能進行讀取不能做出任何修改</code><br>Mutation: 修改器，用於修改 state 中定義的狀態變數，<code>只允許同步處理</code><br>Module: 模組，向 store 植入其他子模組，可以將其他模組已命名空間做為方法使用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// ./module/auth.js</span><br><span class="line">const state = &#123;</span><br><span class="line">  // 定義狀態變數</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const mutations = &#123;</span><br><span class="line">  // 修改狀態變數</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const actions = &#123;</span><br><span class="line">  // 外部呼叫動作</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  namespaced: true,</span><br><span class="line">  state,</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h2><p><a href="https://github.com/VinceChan26/vue-login" target="_blank" rel="noopener">A login program based on Vue.js and axios</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue.js </tag>
            
            <tag> vue-router </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ES6</title>
      <link href="/2018/04/13/ES6/"/>
      <url>/2018/04/13/ES6/</url>
      
        <content type="html"><![CDATA[<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li><a href="#let-const">Block-Scoped Constructs Let and Const (let 與 const 宣告)</a></li><li><a href="#modules">Modules (模組)</a></li><li><a href="#template-literals">Template literals (模板文字)</a></li><li><a href="#multi-line">Multi-line Strings (多行字符串)</a></li><li><a href="#default-parameters">Default Parameters (默認參數)</a></li><li><a href="#destructuring">Destructuring (解構)</a></li><li><a href="#object-concise">Object Literals and Concise Parameters</a></li><li><a href="#arrow-function">Arrow Function (箭頭函式)</a></li><li><a href="#spread">Spread Operator (擴展運算子)</a></li><li><a href="#promise">Promise (承諾)</a></li><li><a href="#classes">Classes (類)</a></li></ol><a id="more"></a><h2 id="Block-Scoped-Constructs-Let-and-Const-let-與-const-宣告"><a href="#Block-Scoped-Constructs-Let-and-Const-let-與-const-宣告" class="headerlink" title="Block-Scoped Constructs Let and Const (let 與 const 宣告)"></a><a name="let-const">Block-Scoped Constructs Let and Const (let 與 const 宣告)</a></h2><h3 id="let-宣告"><a href="#let-宣告" class="headerlink" title="let 宣告"></a><code>let</code> 宣告</h3><ul><li>用法類似 <code>var</code>, 但宣告的變數只有在代碼區塊內有效</li><li>變數不允許重複宣告</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let m = &apos;month&apos;;</span><br><span class="line">&#123;</span><br><span class="line">    let m = &apos;mins&apos;;</span><br><span class="line">    console.log(m); // mins</span><br><span class="line">&#125;</span><br><span class="line">console.log(m); // month</span><br></pre></td></tr></table></figure><h3 id="const-常數"><a href="#const-常數" class="headerlink" title="const (常數)"></a><code>const</code> (常數)</h3><ul><li>宣告為常數，型態為 <code>string</code>, <code>number</code>, <code>boolean</code> 就無法再進行變更</li><li>宣告為 <code>object</code>, <code>array</code> 內層屬性是可以被新增或修改</li><li>const 為指向固定記憶體位址，無法再將本身指向另一個位址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const a = 23;</span><br><span class="line">console.log(a); // 23</span><br><span class="line">a = 46; // Type Error</span><br></pre></td></tr></table></figure><h2 id="Modules-模組"><a href="#Modules-模組" class="headerlink" title="Modules (模組)"></a><a name="modules">Modules (模組)</a></h2><p>JavaScript 長期以來並未內建支援模組系統，社群上發展了兩套知名的模組系統 (<code>CommonJS Modules</code>  <code>Asynchronous Module Definition(AMD)</code>)，在 ES6 中加入了模組的支援，並採用 <code>CommonJS</code>, <code>AMD</code> 的優點。</p><h3 id="特質"><a href="#特質" class="headerlink" title="特質"></a>特質</h3><ul><li>ES6 模組中自動採用 <code>strict</code> 模式</li><li>ES6 語句:<ul><li><code>import</code> 用為引入模組，通常置於檔案開頭</li><li><code>export default</code> 用於輸出模組，通常置於檔案結尾</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 載入模組</span><br><span class="line">import _ from &apos;lodash&apos;;</span><br><span class="line"></span><br><span class="line">// 輸出模組</span><br><span class="line">export default &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Template-literals-模板文字"><a href="#Template-literals-模板文字" class="headerlink" title="Template literals (模板文字)"></a><a name="template-literals">Template literals (模板文字)</a></h2><p>在 ES6 新增了 <code>${NAME}</code> 語法，並把它放在反引號(`)裡。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var fName = &apos;Vince&apos;, job = &apos;Developer&apos;;</span><br><span class="line"></span><br><span class="line">// es5</span><br><span class="line">var sentenceA = &apos;Hi, I am&apos; + fName + &apos;, I am a &apos; + job . &apos;.&apos;;</span><br><span class="line"></span><br><span class="line">// Template literals</span><br><span class="line">var sentenceB = `Hi I am $&#123; fName &#125;, I am a $&#123; job &#125;.`;</span><br></pre></td></tr></table></figure></p><h2 id="Multi-line-Strings-多行字符串"><a href="#Multi-line-Strings-多行字符串" class="headerlink" title="Multi-line Strings (多行字符串)"></a><a name="multi-line">Multi-line Strings (多行字符串)</a></h2><p>在 ES6 新增了 Multi-line Strings, 以下為 ES5 的作法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// es5</span><br><span class="line">var s = &apos;Hi, I am Vince,&apos; +</span><br><span class="line">        &apos;I am a developer&apos;;</span><br></pre></td></tr></table></figure></p><p>在 ES6 僅使用 <code>反引號(`)</code> 就可以解決問題了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// multi-line strings</span><br><span class="line">var s = `Hi, I am Vince,</span><br><span class="line">         I am a developer`;</span><br></pre></td></tr></table></figure></p><h2 id="Default-Parameters-默認參數"><a href="#Default-Parameters-默認參數" class="headerlink" title="Default Parameters (默認參數)"></a><a name="default-parameters">Default Parameters (默認參數)</a></h2><p>當傳入 function 的參數沒有給值時，防止 expection 出現的方法是設定預設值，es6 比起 es5 的使用方法更快</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 以前用法</span><br><span class="line">var setting = function (height, weight) &#123;</span><br><span class="line">    var height = height || 160;</span><br><span class="line">    var weight = weight || 50;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Default Parameters</span><br><span class="line">var setting = function (height = 160, weight = 50) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Destructuring-解構"><a href="#Destructuring-解構" class="headerlink" title="Destructuring (解構)"></a><a name="destructuring">Destructuring (解構)</a></h2><p>透過數值分配，把 array 內的值 assign 到變數或 object 內對應的 key 的值 assign 到變數。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// destructuring</span><br><span class="line">var [a, b, c, d, e] = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(a); // 1</span><br><span class="line">console.log(d); // 4</span><br><span class="line"></span><br><span class="line">// destructuring</span><br><span class="line">var o = &#123;p: 42, q: false&#125;;</span><br><span class="line">var &#123;p, q&#125; = o</span><br><span class="line">console.log(p); // 42</span><br><span class="line">console.log(q); // false</span><br></pre></td></tr></table></figure></p><h2 id="Object-Literals-and-Concise-Parameters"><a href="#Object-Literals-and-Concise-Parameters" class="headerlink" title="Object Literals and Concise Parameters"></a><a name="object-concise">Object Literals and Concise Parameters</a></h2><p>ES6 的 Object 定義變得清楚而且簡短，並提供縮寫語法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getMoney(make, dollars) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        user: make,</span><br><span class="line">        money: dollars</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// object literals</span><br><span class="line">let me = getMoney(&apos;Kate&apos;, 100000);</span><br></pre></td></tr></table></figure></p><h2 id="Arrow-Function-箭頭函式"><a href="#Arrow-Function-箭頭函式" class="headerlink" title="Arrow Function (箭頭函式)"></a><a name="arrow-function">Arrow Function (箭頭函式)</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function (x, y) &#123;</span><br><span class="line">    return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 如同</span><br><span class="line">(x, y) =&gt; &#123; return x + y; &#125;</span><br></pre></td></tr></table></figure><blockquote><p><em> 需注意只有 <code>一個參數</code> 時括號才能 <code>不加</code>，<br> <code>無參數</code> 時就 <code>一定要加</code> 括號</em></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 一個參數時</span><br><span class="line">(num) =&gt; &#123; statements &#125;</span><br><span class="line">num =&gt; &#123; statements &#125;</span><br><span class="line"></span><br><span class="line">// 無參數</span><br><span class="line">() =&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure><h2 id="Spread-Operator-擴展運算子"><a href="#Spread-Operator-擴展運算子" class="headerlink" title="Spread Operator (擴展運算子)"></a><a name="spread">Spread Operator (擴展運算子)</a></h2><p>ES6 加入了 <code>…</code> 簡化了展開陣列的過程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let a = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">// Spread operator</span><br><span class="line">let b = [ ...a ];</span><br><span class="line"></span><br><span class="line">b.push(5);</span><br><span class="line">console.log(a); // 1 2 3</span><br><span class="line">console.log(b); // 1 2 3 5</span><br><span class="line"></span><br><span class="line">// Spread operator</span><br><span class="line">let foo = ((...args) =&gt; &#123; console.log(args); &#125;);</span><br><span class="line">foo(1, 2, 3); // 1 2 3</span><br><span class="line"></span><br><span class="line">// 如同</span><br><span class="line">function foo() &#123;</span><br><span class="line">    console.log(Array.prototype.slice.call(arguments)); // 1 2 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Promise-承諾"><a href="#Promise-承諾" class="headerlink" title="Promise (承諾)"></a><a name="promise">Promise (承諾)</a></h2><blockquote><p>ES6 Promise 實作中，會確保 Promise 物件一實體化後就會固定住狀態，要不就是「已實現」<code>resolve</code>，不然就是「已拒絕」<code>reject</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise ((resolve, reject) =&gt; &#123;</span><br><span class="line">   // 成功時</span><br><span class="line">   resolve(value);</span><br><span class="line">   // 失敗時</span><br><span class="line">   reject(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(function(value) &#123;</span><br><span class="line">  // on fulfillment(已實現時)</span><br><span class="line">&#125;, function(reason) &#123;</span><br><span class="line">  // on rejection(已拒絕時)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a><a name="classes">Classes</a></h2><p>ES6 提供了更接近傳統語言的寫法，引入了<code>class</code>類別，效仿其他程式語言擁有的物件導向(OOP)概念，取代需要原型 prototype 的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class foo &#123;</span><br><span class="line">    // 建構子</span><br><span class="line">    constructor(x, y) &#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getPointSign() &#123;</span><br><span class="line">        return this.x * this.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typeof foo // function</span><br><span class="line">foo === foo.prototype.constructor // true</span><br><span class="line">let test = new foo(20, 80);</span><br><span class="line"></span><br><span class="line">console.log(test.getPointSign()); // 1600</span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li><code>class</code> 本身原型是指向建構函數 function</li><li><code>prototype</code> 屬性仍存在</li><li>擁有默認的 <code>constructor</code> 建構子函數</li><li><code>class</code> 本身也使用表達式來定義</li></ul><p><a href="https://medium.freecodecamp.org/make-your-code-cleaner-shorter-and-easier-to-read-es6-tips-and-tricks-afd4ce25977c" target="_blank" rel="noopener">https://medium.freecodecamp.org/make-your-code-cleaner-shorter-and-easier-to-read-es6-tips-and-tricks-afd4ce25977c</a></p><p><a href="https://wohugb.gitbooks.io/ecmascript-6/content/index.html" target="_blank" rel="noopener">https://wohugb.gitbooks.io/ecmascript-6/content/index.html</a></p><p><a href="https://segmentfault.com/a/1190000004365693" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004365693</a></p><p><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/var_const_naming.html" target="_blank" rel="noopener">https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/var_const_naming.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Regular Expression 起手式</title>
      <link href="/2018/04/10/%E8%B5%B7%E6%89%8B%E5%BC%8F/"/>
      <url>/2018/04/10/%E8%B5%B7%E6%89%8B%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Regular-Expression"><a href="#什麼是-Regular-Expression" class="headerlink" title="什麼是 Regular Expression"></a>什麼是 Regular Expression</h2><p>Regular Expression 中文為「正規表達式」，代碼中常簡寫為 regex, regexp, RE<br><a id="more"></a></p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ol><li>Search</li><li>Replace</li><li>Validate</li><li>Reformat</li></ol><h2 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h2><ol><li>語法精簡</li><li>速度極快</li><li>多工具的支援</li></ol><h2 id="運用"><a href="#運用" class="headerlink" title="運用"></a>運用</h2><h3 id="特殊字元"><a href="#特殊字元" class="headerlink" title="特殊字元 [\^$.|?*+()]"></a>特殊字元 <code>[\^$.|?*+()]</code></h3><blockquote><p>若遇到以上特殊字元需加上 <code>反斜線(\)</code></p></blockquote><h3 id="任意字元"><a href="#任意字元" class="headerlink" title="任意字元 ."></a>任意字元 <code>.</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// world 會被選取</span><br><span class="line">hello world 取出 &#123;.&#125;orld</span><br><span class="line">(regex): /.orld/</span><br></pre></td></tr></table></figure><h3 id="多字元縮寫"><a href="#多字元縮寫" class="headerlink" title="多字元縮寫"></a>多字元縮寫</h3><p><code>[]</code> 為多個字元選取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\d - digit /[0-9]/</span><br><span class="line">\w - word  /[A-Za-z0-9_]/</span><br><span class="line">\s - space /[\n\r\t]/</span><br><span class="line"></span><br><span class="line">\D - non-digit /[^0-9]/</span><br><span class="line">\W - non-word  /[^A-Za-z0-9_]/</span><br><span class="line">\S - non-space [^\n\r\t]</span><br></pre></td></tr></table></figure></p><h3 id="次數規範"><a href="#次數規範" class="headerlink" title="次數規範"></a>次數規範</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 符號</span><br><span class="line">* - 任意次數</span><br><span class="line">+ - 至少一次</span><br><span class="line">? - 零或一次</span><br><span class="line"></span><br><span class="line">// 符合的次數</span><br><span class="line">&#123;次數&#125;</span><br><span class="line">&#123;最少次數, 最大次數&#125;</span><br><span class="line"></span><br><span class="line">/l*/</span><br><span class="line"></span><br><span class="line">Q. hello world 取出 l 的部分</span><br><span class="line">A. (regex): ll l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Q. hello world 取出兩個 l 的部分</span><br><span class="line">A.（regex): /l&#123;2&#125;/</span><br></pre></td></tr></table></figure><h3 id="頭尾"><a href="#頭尾" class="headerlink" title="頭尾"></a>頭尾</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">^ - 開頭</span><br><span class="line">$ - 結尾</span><br><span class="line"></span><br><span class="line">hello baby 選取 he</span><br><span class="line">(regex): /^he/</span><br><span class="line"></span><br><span class="line">hello baby 取出結尾的 by</span><br><span class="line">(regex): /by$/</span><br></pre></td></tr></table></figure><h2 id="常見範例"><a href="#常見範例" class="headerlink" title="常見範例"></a>常見範例</h2><table><thead><tr><th>regex</th><th>名稱</th><th>e.g.</th></tr></thead><tbody><tr><td>/^[1-9]\d{3}-\d-\d{2}$/</td><td>西元生日</td><td>1996-08-14</td></tr><tr><td>/^[A-Z]\d{9}$/</td><td>身分證字號</td><td>A123456789</td></tr><tr><td>/^\<a href="mailto:w+@gmail.com" target="_blank" rel="noopener">w+@gmail.com</a>$/</td><td>Gmail</td><td><a href="mailto:abc@gmail.com" target="_blank" rel="noopener">abc@gmail.com</a></td></tr><tr><td>/^[\d\+\-\*\\/]*$/</td><td>四則運算</td><td>2+6/4-7</td></tr></tbody></table><blockquote><p>此範例 regex 不驗證邏輯，單純驗證格式</p></blockquote><h2 id="練習"><a href="#練習" class="headerlink" title="練習"></a>練習</h2><h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;I am a web developer&apos; 取出 a</span><br><span class="line">(regex): /\ba\b/g</span><br></pre></td></tr></table></figure><blockquote><p>\b: boundary 意指無邊界<br><br>g: gobal 意指全域，若沒有加 g, 則抓取到第一筆符合後後面不尋找<br><br>i: 不論大小寫</p></blockquote><h3 id="II-選取"><a href="#II-選取" class="headerlink" title="II 選取"></a>II 選取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;apple&apos;.match(/(a.)(p.)e/)</span><br><span class="line">// $1 = &apos;ap&apos;;</span><br><span class="line">// $2 = &apos;pl&apos;;</span><br><span class="line"></span><br><span class="line">&apos;apple&apos;.replace(/(a.)(p.)e/, &apos;$1$1&apos;)</span><br><span class="line">// result: apap</span><br></pre></td></tr></table></figure><p><span style="color: white; background:#FFB435; border: 1px solid; border-radius: 5px; padding: 5px;margin: 5px; display: inline">tips</span><br></p><blockquote><p>VSCode 有支援 regex, 請使用 command + f 並點選 .*<br>regex 的運用也可以在 mac terminal 上進行運用</p></blockquote><p>還有更多就遇到的時候再查詢囉 ^_^</p>]]></content>
      
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Currying in Javascript ES6</title>
      <link href="/2018/03/16/currying/"/>
      <url>/2018/03/16/currying/</url>
      
        <content type="html"><![CDATA[<h2 id="currying"><a href="#currying" class="headerlink" title="currying"></a><a name="currying">currying</a></h2><p>currying 又稱「柯里化」。</p><a id="more"></a><h3 id="何謂-currying"><a href="#何謂-currying" class="headerlink" title="何謂 currying ?"></a>何謂 currying ?</h3><blockquote><p>將多個參數(param)，轉換成接收單一參數 (param) 的函數 (function)</p></blockquote><h3 id="currying-規則"><a href="#currying-規則" class="headerlink" title="currying 規則"></a>currying 規則</h3><blockquote><p>將一個 N 元函式轉換成一個一元函式，這個一元函式再回傳一個一元函式</p></blockquote><h4 id="before-currying"><a href="#before-currying" class="headerlink" title="before currying"></a>before currying</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let sum = ((x, y, z) =&gt; &#123;</span><br><span class="line">  return x + y + z;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">sum(1, 2, 3); // returns 6</span><br></pre></td></tr></table></figure><h4 id="after-currying"><a href="#after-currying" class="headerlink" title="after currying"></a>after currying</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let sum = ((x) =&gt; &#123;</span><br><span class="line">  return ((y) =&gt; &#123;</span><br><span class="line">    return ((z) =&gt; &#123;</span><br><span class="line">      return x + y + z;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">sum(1)(2)(3); // return 6</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> currying </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
