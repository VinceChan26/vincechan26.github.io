{"title":"RDBMS 的 ACID","date":"2019-05-01T08:01:14.000Z","url":"/2019/05/01/RDBMS/","tags":["RDBMS","RDBMS ACID","RDBMS Isolation","Atomicity","Consistency","Isolation","Durability","Isolation Level","MySQL Isolation Level"],"content":"tr:nth-child(2) > td:nth-child(2),tr:nth-child(3) > td:nth-child(2),tr:nth-child(3) > td:nth-child(3),tr:nth-child(4) > td:not(:first-child) {    background: #bbffdd;}tr:nth-child(1) > td:not(:first-child),tr:nth-child(2) > td:nth-child(3),tr:nth-child(2) > td:nth-child(4),tr:nth-child(3) > td:nth-child(4) {    background: #ff9999;}RDBMS 的 ACIDACID 是指資料庫管理系統 (DBMS) 在寫入或更新資料的過程中，為保證事務(Transaction, 簡稱 TX)是正確可靠的。ACID 必須具備 Atomicity Consistency Isolation DurabilityACID原子性 AtomicityTX 是一個不可分割的單元，只允許全部完成或全部不完成一個 TX，只允許全部完成或全部不完成，不會結束在中間某個環節。過程中若發生錯誤，會回到 TX 開始前的狀態 (此行為稱為回滾 (Rollback))。一致性 Consistency每個人對 Consistency 定義不完全相同TX 進行後，資料庫的完整性沒有被破壞。寫入的資料必須完全符合所有的預設規則，這包含資料的精確度、串聯性以及後續可自發性地完成預定的工作。隔離性 Isolation確保同一筆資料被改動時，確保不會被兩個 TX 同時改動當兩個或者多個 TX 併發訪問(此處訪問指查詢和修改的操作) 資料庫的同一數據時所表現出的相互關係。Isolation 是交易的保證之一，表示交易與交易之間不互相干擾，如同同時間就只有自己的交易存在一樣，隔離性保證的基本方式是在資料庫層面，對資料庫或相關欄位鎖定，在同一時間內只允許一個交易進行更新或讀取。Isolation 是為了避免 Race condition如果有兩個 TX 正在改動相同的資料， RDBMS 會讓後來的 TX 被 blocking, 來避免 race condition何謂 Race condition兩個程序同時運行時，對同一個單元進行操作，使最終的結果不正確。持久性 Durabilitycommit 時如果系統發生錯誤，那麼在系統復原後要繼續原本未完成的工作在 TX 完成以後，對資料庫所作的更改保存在資料庫之中，並且是完全的。底層行為是寫入 redo logRead PhenomenaDirty reads (髒讀)能讀取 uncommited 的 TX 資料。Non-repeatable reads (不重複讀取)在同一 TX 第一次讀取和第二次讀取內容結果不同。Phantom reads (幻讀)當在同一個 TX 連續兩次讀取之間，有另一個 TX 進行 insert delete，使讀取出來的筆數跟上次不同。References: (database_systems)Non-repeatable reads, Phantom reads 的差異Non-repeatable reads第一次查詢與第二次查詢結果上的結果內容不同。Phantom Reads第一次查詢與第二次查詢出來的筆數不同。隔離級別 Isolation LevelIsolation LevelDirty readsNon-repeatable readsPhantom readsRead uncommittedmay occurmay occurmay occurRead committeddon’t occurmay occurmay occurRepeatable readdon’t occurdon’t occurmay occurSerializabledon’t occurdon’t occurdon’t occurRead uncommittedRead committed能防止 Dirty readsRepeatable read能防止 Dirty reads, Non-repeatable readsSerializable能防止 Dirty reads, Non-repeatable reads, Phantom reads查詢 MySQL Isolation LevelMySQL 的 Isolation Level 預設為 Repeatable ReadsMore[DB] IsolationMysql 8 新特性 window functions 的作用再談 Clustered Index資料庫交易的 IsolationRDBMS 先修課程筆記flume之退避算法backoff algorithmMySQL Redo/Binlog Group Commit , 2pc事务两阶段提交，Crash Recovery浅析"},{"title":"PHP Filter","date":"2019-04-01T09:47:55.000Z","url":"/2019/04/01/php-filter/","tags":["PHP filter","filter","filter_var","filter_input"],"content":"Filter Functionfilter_list列出所有支援的 filterfilter_has_var檢查變數是否有存在 (如同isset)filter_id返回 filtername IDfilter_input_array輸入類型陣列濾除，如同 filter_inputfilter_input輸入類型濾除filter_var_array變數陣列濾除，如同 filter_varfilter_var變數濾除輸入類型 (input type)typeParameterENVINPUT_ENVREQUESTINPUT_REQUESTGETINPUT_GETPOSTINPUT_POSTCOOKIEINPUT_COOKIESESSIONINPUT_SESSIONSERVERINPUT_SERVERFilter 類型 (type of filters)Validate filtersSanitize filtersOthers filtersValidate filtersFilter TypeUsageFILTER_VALIDATE_BOOLEAN布林值驗證，若不為布林值回傳 NULLFILTER_VALIDATE_DOMAINDomain 驗證 (須遵守 RFC 1034, RFC 1035, RFC 952, RFC 1123, RFC 2732, RFC 2181, RFC 1123 規範)FILTER_VALIDATE_EMAILEmail 驗證FILTER_VALIDATE_FLOAT浮點數驗證FILTER_VALIDATE_INT整數驗證FILTER_VALIDATE_IPIP 驗證FILTER_VALIDATE_MACMAC Address 驗證FILTER_VALIDATE_REGEXP使用 RegExp 驗證FILTER_VALIDATE_URLURL 驗證Sanitize filtersFilter TypeUsageFILTER_SANITIZE_EMAIL過濾除了 字母 數字 符號 !#$%&amp;&#39;*+-=?^_{}~@.[]. 的字元FILTER_SANITIZE_ENCODEDURL encodeFILTER_SANITIZE_MAGIC_QUOTES如同 addslashes()FILTER_SANITIZE_NUMBER_FLOAT過濾所有字元，除了數字 浮點數 + - .,eEFILTER_SANITIZE_NUMBER_INT過濾所有字元，除了數字 + -FILTER_SANITIZE_SPECIAL_CHARSHTML 轉義字元&#39; &quot; &lt;&gt; &amp; 與 ASCII 小於 32 的字元FILTER_SANITIZE_FULL_SPECIAL_CHARS如同 htmlspecialchars()FILTER_SANITIZE_STRING過濾標籤字元FILTER_SANITIZE_STRIPPED如同 string 過濾FILTER_SANITIZE_URL過濾所有字元，除了字母 數字與 $-_.+!*’(),{}\\^~[]`&lt;&gt;#%”;/?:@&amp;=.FILTER_UNSAFE_RAW一個預設的過濾器e.g.使用 FILTER_VALIDATE_REGEXP 過濾 datetime"},{"title":"git","date":"2019-03-08T07:08:22.000Z","url":"/2019/03/08/git/","tags":["git"],"content":"改寫 commit使用時機：增加最近提交時漏掉的檔案修改最近的提交的內容或註解如何寫好 Commit Message用新的空行將標題和主體兩者隔開。標題首字母大寫不要用句號結束標題標題中使用祈使句主體部分去解釋「是什麼」和「為什麼」而不是怎麼做檢視 commit log檢視 commit log (不包含 id 及摘要)檢視變更(內容)刪除 Local 所有已經不在 Remote 的分支以下提供兩種方法，二擇一即可。取消過去的提交改寫提交的歷史紀錄在 push 之前，重新輸入正確的提交註解將含義上相近的內容，合併成清楚的提交增加最近提交時漏掉的檔案git rebase -i (-i 參數，可以改寫提交，替換，刪除，合併)匯合分支上的提交一同合併Step先使用 git log 查看 commit IDe.g:squashReference"},{"title":"vue webpack3 升級成 webpack4","date":"2019-01-14T10:09:16.000Z","url":"/2019/01/14/wepack3-grade/","tags":["webpack3","webpack4","webpack-dev-server","vue-loader","eslint-loader"],"content":"vue webpack3 升級成 webpack4在 2019 年初的時候收到來自於 Github 的 Security Alert, 告知我 Webpack-dev-server@^2.9.1 有漏洞，需要從原先的 webpack-dev-server: ^2.9.1 升級到 ^3.1.11所以就來採了 webpack 升級的坑了NecessaryEnvironmentnode &gt;= 6.11.5 OR 8 以上的 LTS versionmode 模式配置mode 是 webpack4 新增的參數選項。有兩個值可選 development 與 production|option|Description||——-|—–||development| 啟用 NamedChunksPlugin, NamedModulesPlugin||production| 啟用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin, TerserPlugin||none| 不使用任何默認優化|NODE_ENV 並不會自動配置 mode，所以 mode 必須自建mode: development瀏覽器工具優化建構速度與開發體驗內建 NamedModulesPlugin, NoEmitOnErrorsPlugin開發模式下支援註解與提示mode: production預啟用所有優化功能 (minify, splite etc.)內建 Scope hoisting, Tree-shaking (原ModuleConcatenationPlugin), NoEmitOnErrorsPlugin, optimization.minimize不支持 watchingprocess.env.NODE_ENV 的值不需要再定義，不再使用 DefinePlugin去除開發模式下的 code, 註解更小的 bundle 大小mode: none會禁用所有的預載入，可以使用 optiomization.* 搭配出自己的自定義模式安裝 webpack-cli在 webpack4 中 cli 工具拆分成了 webpack 庫與 webpack-cli 命令行工具兩個庫，需要使用 cli，就必須安装 webpack-cli，安裝語法如下：webpack configure 插件優化新增 optimization.splitChunks 和 optimization.runtimeChunk 替代 CommonsChunkPlugin新增 optimization.noEmitOnErrors 替代 NoEmitOnErrorsPlugin新增 optimization.namedModules 来替代 NamedModulesPlugin預載入 optimization.minimize 來壓縮Upgrade升級 webpack packages，語法如下：升級 karam packages，語法如下：Issues SummaryTypeError: Cannot read property ‘eslint’ of undefined錯誤訊息全文：Module build failed (from ./node_modules/eslint-loader/index.js):TypeError: Cannot read property &#39;eslint&#39; of undefinedRepair遇上了 eslint-loader 權限上的問題，解決方法配置 LoaderOptionseslint-loader 錯誤錯誤訊息全文：TypeError: Cannot read property &#39;eslint&#39; of undefined at Object.module.exports (...)Repair查了一下 eslint-loader 與 webpack 4 的問題後，發現 eslint-loader@2 的時候有進行修正。所以就來升級 eslint-loader, 語法如下：wepack3 升級到 webpack4webpack 4 後，一定要設定 mode插件修正Repairwebpack4 中有提到使用 optimization.splitChunks, optimization.runtimeChunk 替代 CommonsChunkPlugin 所以將有使用到 CommonsChunkPlugin 修正為 RuntimeChunkPlugin內建 optimization.noEmitOnErrors 替代 NoEmitOnErrorsPlugin,內建 optimization.namedModules 替代 NamedModulesPluginCommonsChunkPlugin 已被刪除，建議使用 splitChunks錯誤訊息全文：Error: webpack.optimize.CommonsChunkPlugin has been removed, please use config.optimization.splitChunks instead.Repair原：修改後：extract-text-webpack-plugin [contenthash] 編譯失敗問題Error: Path variable [contenthash] not implemented in this context: static/css/[name].[contenthash].cssRepair 1:將 ExtractTextPlugin 中的 contenthash 修改成 hash原：修改後：Repair 2:將 extract-text-webpack-plugin 改用 mini-css-extract-pluginvue-loader 編譯失敗TypeError: Cannot read property ‘vue’ of undefined若安裝的是 vue-loader@15 必須在 webpack.prod.conf.js 檔案內載入 vue-loader, 語法如下：檔案大小警告WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).添加在 webpack.conf 中處理語法如下：References"},{"title":"Laravel","date":"2018-06-06T07:59:25.000Z","url":"/2018/06/06/laravel/","tags":["Laravel","Routing","Hashing","Session","Eloquent","CSRF","Blade","Migration","Lang","Old Input","Middleware","Database","Package"],"content":"學習了 Laravel 一年多了，來整理一下學習到的一些小技巧。HashingLaravel 對密碼加密後，密碼長度固定為 60加密密碼驗證密碼RoutingRestful APIGET: 查詢資料POST: 新增資料PUT: 修改資料DELETE: 刪除資料PATCH: 對資料做部分更新列出現在所有的路由端口資訊Blade templatesMustache主要作用：將變數資料的特殊字元做編碼轉換，避免 XSS 攻擊XSS: 全名為 Cross-site scripting, 中譯為「跨網站指令碼」，將程式碼注入到網頁上。避免方式：htmlentities, htmlspecialchars若是不想將變數進行 htmlentities 轉換直接輸出的話可使用以下方式：變動資料處理將會變動的資料使用 @yield() 去取代共用元件處理在畫面上的共用元件，使用 @include() 進行載入Migration使用 artisan 建立 Migration 檔案執行 Migration 檔案恢復上一版本的 migration 檔案清除所有的 migration 版本重設所有的 migration 版本，重新建立 migration如何在 Production 進行欄位變更當產品上線時，若要新增欄位的話，必須針對個別檔案進行 migration 建置。--table 和 --create 選項也可以用於某個表，以及是否遷移將創建一個新的資料表。CSRF英譯 Cross-Site Request Forgery, 中譯「跨網站請求偽造」。是請求偽造的惡意攻擊，在表單送出時，必須確認是使用者從網站發出的請求，CSRF 產生的方式有兩種，方式如下：手動產生 CSRF tokenLaravel 產生 CSRF tokenLang語系檔路徑路徑位址為 /resources/lang/ 目錄中Old Input驗證錯誤表單資料保留當使用者 key in 錯誤資料時，我們往往會將使用者導向至先前的頁面。但是回先前頁面，資料卻必須要全部重新 key in，為了解決這種問題，我們在重新導向時，使用 withInput() 帶入使用者先前 key in 的資料。在模板中透過 old() 方法接收原先表單 key in 的資料Eloquent印出 SQL 語法HTTP Redirects導向回先前頁面在進行 transcation 時，通常會將使用者導向回 login 頁面，確保使用者資訊沒遺失，實作方式如下：redirect()-&gt;intended() 可以讓使用者導向回先前登入前的頁面Session遇到 Load balance當遇到有 load balance 時，會將 session 放在共用的 server 上，像是 database, redis, memcached移除 sessionMiddleware建立 Middleware註冊 Middleware當完成 Middleware 檔案後，要在 app/Http/Kernel.php 做載入Database Transactions交易(transcation)Package寄送通知信第三方認證 (實作 facebook, google, github 登入)安裝完成後，依照官方的安裝指示，在 config/app.php 檔案中的 providers 與 aliases 加入套件設定設定 facebook 資料撰寫完檔案後，必須到  Facebook Developers 取得參數，並寫入到 .env 檔案內。在使用 Facebook 第三方認證時，必須要設定重新導向允許取得授權資料的網址，並將網址加入設定「有效的 OAuth 重新導向 URI」中。Queue為了達到工作延遲處理的目的，會使用 Queue 來處理工作延遲，有點類似 Deamon。建立 Job輸入完 cli 後，可以在 app/Jobs 目錄內看到檔案。最常見的例子就是註冊完後的郵件寄送。使用 Redis 存取 Job在派發 Job 時，若是 Job 數增加時，我們可以先將它寫入 database, redis, beanstalkd, Amazon SQS，以下我們進行 Redis 的安裝安裝完 Redis 後，在 config/queue.php 內寫入 Redis 設定檢查 Job 程序持續執行 Job - 工具 Supervisor最好的程序處理方式是將程序丟到作業系統的背景執行，在機器重開後，還能自動繼續執行程序，可以使用 Supervisor 完成這樣的工作"},{"title":"Webpack","date":"2018-05-29T08:20:11.000Z","url":"/2018/05/29/webpack/","tags":["webpack"],"content":"Webpackwebpack 是一個模組包裝工具。主要作用：將相互依賴的模組處理成靜態資源特性程式分割Ｗebpack 的依賴樹有兩種類型的依賴：同步依賴與非同步依賴。在優化了依賴樹後，非同步依賴會成為一個程式的分割點，並組成一個新的程式區塊載入器 Loader原生的 Webpack 只能處理 JavaScript, 但透過 Loader 可以將各種類型的資源轉換成 JavaScript 模組。以下是常用的 Loader：vue-loader：用於載入與編譯 .vuevue-style-loader：用於載入 .vue 的樣式css-loader：用於樣式直接插入到頁面中 &lt;style&gt;less-loader：用於編譯與載入 .lessbabel-loader：用於將 ES6 編譯成瀏覽器相容的 ES5file-loader：用於載入黨案url-loader：用於載入 URL 指定的檔案json-loader：用於載入 .jsonsass-loader：用於載入 .sassnode-sass：用於編譯 .sass智慧解析Webpack 有個智慧解析器，可以處理任何第三方庫 (library)，無論是 CommonJS, AMD 或是普通的 JavaScript file外掛程式系統Webpack 大多數的內部功能都是以外掛程式系統為基礎運行，還可以使用開源的 Webpack 插件達到各式的需求\u001e"},{"title":"Vue & vue-router & vuex","date":"2018-05-22T06:33:19.000Z","url":"/2018/05/22/Vue-js/","tags":["vue.js","vue-router","vuex"],"content":"全局安裝 vue-cli使用 vue cli 創建專案快速開發適用simple: 用於單頁應用程式的最小化設定webpack-simple: 基礎的 webpack + vue-loaderbrowserify-simple: 擁有基礎功能的的 Browserify + vueify產品開發適用webpack 擁有進階功能的 webpack + vue-loader 用於正式開發browserify: 擁有進階功能的 Browserify + vueify 用於正式開發what is vue-router它是 Vue.js 的官方路由管理器，它與 Vue.js 的核心深度集成，讓建構 SPA 應用變得簡單。關於前端路由前端路由是不存在「請求」一說。前端路由是直接找到位址符合的元件或是物件並將其繪製出來，並實踐了 SPA (Single Page Application)Installationuse npm installuse yarn install安裝完畢後須將 vue-router 設定於 Vue 的全域設定中。在 Vue 專案中 main.js 為程式入口檔案，所以在 main.js 寫入以下內容：ModeHash：使用 URL hash 來作為路由，支援所有 browserHistory：依賴 HTML5 History API 和伺服器設定Abstract：支援所有 JavaScript 執行環境Directive&lt;router-view&gt;：用來內嵌自己的 component view&lt;router-link&gt;：具有路由功能應用中的點擊導覽在做後端開發或前端開發，路由的使用都有一個明確的原則，就是不直接參考路由定義。一旦專案越來越大，路由的規則越來越多時，牽一髮而動全身，後續帶來的技術債是可想而知的。vue-router 提供了「命名路由 (name)」取代舊式的 URL 路徑。e.g.如何追蹤動態路徑參數透過 this.$route 可以將動態路徑的參數讀取出來。what is vuexVuex 是一個專為 Vue.js 應用程式開發的狀態管理模式。vuex 狀態管理應用分為以下幾個部分：Installationuse npm installuse yarn install開始使用 vuex安裝 vuex 之後，先建立一個 store 並儲存 /src/store/index.js 內，內容如下：核心概念State: 實例的根狀態物件，用於定義共用狀態變數Getter: 讀取器，外部程式透過它取得變數的實際值 (像是 vue computed)Action: 動作，執行本機或是遠端某一個操作，像是 vue methods，更像是 MVC 中的 Controller, 可以執行任何的非同步處理，他對狀態只能進行讀取不能做出任何修改Mutation: 修改器，用於修改 state 中定義的狀態變數，只允許同步處理Module: 模組，向 store 植入其他子模組，可以將其他模組已命名空間做為方法使用sampleA login program based on Vue.js and axios"},{"title":"JavaScript ES6","date":"2018-04-13T08:18:42.000Z","url":"/2018/04/13/ES6/","content":"特性Block-Scoped Constructs Let and Const (let 與 const 宣告)Modules (模組)Template literals (模板文字)Multi-line Strings (多行字符串)Default Parameters (默認參數)Destructuring (解構)Object Literals and Concise ParametersArrow Function (箭頭函式)Spread Operator (擴展運算子)Promise (承諾)Classes (類)Block-Scoped Constructs Let and Const (let 與 const 宣告)let 宣告用法類似 var, 但宣告的變數只有在代碼區塊內有效變數不允許重複宣告const (常數)宣告為常數，型態為 string, number, boolean 就無法再進行變更宣告為 object, array 內層屬性是可以被新增或修改const 為指向固定記憶體位址，無法再將本身指向另一個位址Modules (模組)JavaScript 長期以來並未內建支援模組系統，社群上發展了兩套知名的模組系統 (CommonJS Modules  Asynchronous Module Definition(AMD))，在 ES6 中加入了模組的支援，並採用 CommonJS, AMD 的優點。特質ES6 模組中自動採用 strict 模式ES6 語句:import 用為引入模組，通常置於檔案開頭export default 用於輸出模組，通常置於檔案結尾Template literals (模板文字)在 ES6 新增了 ${NAME} 語法，並把它放在反引號(`)裡。Multi-line Strings (多行字符串)在 ES6 新增了 Multi-line Strings, 以下為 ES5 的作法在 ES6 僅使用 反引號(`) 就可以解決問題了Default Parameters (默認參數)當傳入 function 的參數沒有給值時，防止 expection 出現的方法是設定預設值，es6 比起 es5 的使用方法更快Destructuring (解構)透過數值分配，把 array 內的值 assign 到變數或 object 內對應的 key 的值 assign 到變數。Object Literals and Concise ParametersES6 的 Object 定義變得清楚而且簡短，並提供縮寫語法Arrow Function (箭頭函式) 需注意只有 一個參數 時括號才能 不加， 無參數 時就 一定要加 括號Spread Operator (擴展運算子)ES6 加入了 … 簡化了展開陣列的過程。Promise (承諾)ES6 Promise 實作中，會確保 Promise 物件一實體化後就會固定住狀態，要不就是「已實現」resolve，不然就是「已拒絕」rejectClassesES6 提供了更接近傳統語言的寫法，引入了class類別，效仿其他程式語言擁有的物件導向(OOP)概念，取代需要原型 prototype 的操作。基本使用class 本身原型是指向建構函數 functionprototype 屬性仍存在擁有默認的 constructor 建構子函數class 本身也使用表達式來定義"},{"title":"Regular Expression 起手式","date":"2018-04-10T03:53:08.000Z","url":"/2018/04/10/起手式/","tags":["regex"],"content":"什麼是 Regular ExpressionRegular Expression 中文為「正規表達式」，代碼中常簡寫為 regex, regexp, RE用途SearchReplaceValidateReformat好處語法精簡速度極快多工具的支援運用特殊字元 [\\^$.|?*+()]若遇到以上特殊字元需加上 反斜線(\\)任意字元 .多字元縮寫[] 為多個字元選取次數規範頭尾常見範例regex名稱e.g./^[1-9]\\d{3}-\\d-\\d{2}$/西元生日1996-08-14/^[A-Z]\\d{9}$/身分證字號A123456789/^\\w+@gmail.com$/Gmailabc@gmail.com/^[\\d\\+\\-\\*\\\\/]*$/四則運算2+6/4-7此範例 regex 不驗證邏輯，單純驗證格式練習I\\b: boundary 意指無邊界g: gobal 意指全域，若沒有加 g, 則抓取到第一筆符合後後面不尋找i: 不論大小寫II 選取tipsVSCode 有支援 regex, 請使用 command + f 並點選 .*regex 的運用也可以在 mac terminal 上進行運用還有更多就遇到的時候再查詢囉 ^_^"},{"title":"Currying in Javascript ES6","date":"2018-03-16T05:46:42.000Z","url":"/2018/03/16/currying/","tags":["currying"],"content":"curryingcurrying 又稱「柯里化」。何謂 currying ?將多個參數(param)，轉換成接收單一參數 (param) 的函數 (function)currying 規則將一個 N 元函式轉換成一個一元函式，這個一元函式再回傳一個一元函式before curryingafter currying"}]